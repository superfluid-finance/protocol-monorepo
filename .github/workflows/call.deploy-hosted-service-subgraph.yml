name: Reusable Workflow | Deploy Subgraph to Hosted Service

on:
  workflow_call:
    inputs:
      release_branch:
        required: true
        type: string
        description: 'The subgraph release: feature, dev, v1'
      network:
        required: true
        type: string
        description: 'The network you want to deploy to (matic, xdai, eth-mainnet, etc.) or `all` for all networks.'
    secrets:
      THE_GRAPH_ACCESS_TOKEN:
        description: 'The Graph access token for deploying subgraphs'
        required: true

jobs:
  show-contexts:
    name: Show Contexts

    runs-on: ubuntu-latest

    steps:
      - name: Show contexts
        env:
          HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          echo github.event_name: ${{ github.event_name }}
          echo github.sha: ${{ github.sha }}
          echo github.repository: ${{ github.repository }}
          echo github.ref: "$GITHUB_REF"
          echo github.head_ref: "$HEAD_REF"
          echo github.base_ref: ${{ github.base_ref }}

  deploy-subgraph:
    name: Deploy Hosted Service Subgraph

    runs-on: ubuntu-latest
    env:
      subgraph-working-directory: ./packages/subgraph

    defaults:
      run:
        shell: nix develop -c bash {0}

    steps:
      - uses: actions/checkout@v3

      - uses: cachix/install-nix-action@v19
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build contracts"
        run: |
          yarn install --frozen-lockfile
          yarn build
        working-directory: ./packages/ethereum-contracts

      - name: "Get ABI"
        run: node scripts/getAbi.js
        working-directory: ${{ env.subgraph-working-directory }}

      - name: "Prepare subgraph manifest"
        # This step is required for generating an arbitrary subgraph.yaml
        # and addresses.ts file for the yarn codegen step below
        # using a mock.json networks file.
        run: ./tasks/prepare-manifest.sh mock
        working-directory: ${{ env.subgraph-working-directory }}

      - name: "Generate meta.ignore.ts file"
        run: "yarn generate-sf-meta"
        working-directory: ${{ env.subgraph-working-directory }}
        env:
          COMMIT_HASH: ${{ github.sha }}
          CONFIGURATION: ${{ inputs.release_branch }}

      - name: "Generate AssemblyScript types"
        run: "yarn codegen"
        working-directory: ${{ env.subgraph-working-directory }}

      - name: Ensure release_branch property is passed
        run: |
          if [ "${{ inputs.release_branch }}" == "" ];then
            echo "You must pass in the release_branch at a minimum."
            exit 1
          fi

      - name: "Deploy to All Hosted Subgraph Superfluid endpoints"
        if: inputs.network == 'all'
        run: ./tasks/deploy-all-hosted-service-networks.sh ${{ inputs.release_branch }}
        working-directory: ${{ env.subgraph-working-directory }}
        env:
          THE_GRAPH_ACCESS_TOKEN: ${{ secrets.THE_GRAPH_ACCESS_TOKEN }}

      - name: "Deploy to Hosted Subgraph Superfluid endpoint"
        if: inputs.network != 'all'
        run: ./tasks/deploy-to-hosted-service-network.sh ${{ inputs.release_branch }} ${{ inputs.network }}
        working-directory: ${{ env.subgraph-working-directory }}
        env:
          THE_GRAPH_ACCESS_TOKEN: ${{ secrets.THE_GRAPH_ACCESS_TOKEN }}