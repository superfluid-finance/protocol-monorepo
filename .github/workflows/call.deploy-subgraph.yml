name: Reusable Workflow | Deploy Subgraph

on:
  workflow_call:
    inputs:
      vendor:
        required: true
        description: "Where to deploy subgraph to; superfluid, goldsky, or graph"
        type: string
      deployment_env:
        required: true
        type: string
        description: "The subgraph deployment env: v1, dev, feature"
      network:
        required: true
        type: string
        description: "The network you want to deploy to (matic, xdai, eth-mainnet, etc.) or `all` for all networks."

    secrets:
      SUBGRAPH_URL_TEMPLATE:
        description: "Subgraph endpoint url template"
        required: false
      SATSUMA_DEPLOY_KEY:
        description: "Satsuma deploy key"
        required: false
      THE_GRAPH_ACCESS_TOKEN:
        description: "The Graph (hosted service) access token for deploying subgraphs"
        required: false
      GOLDSKY_API_KEY:
        description: "Goldsky API key for deploying subgraphs"
        required: false
      AIRSTACK_API_KEY:
        description: "Airstack API key for deploying subgraphs"
        required: false
      SUPERFLUID_IPFS_API:
        description: "Superfluid IPFS API endpoint"
        required: false

jobs:
  show-contexts:
    name: Show Contexts

    runs-on: ubuntu-latest

    steps:
      - name: Show contexts
        env:
          HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          echo github.event_name: ${{ github.event_name }}
          echo github.sha: ${{ github.sha }}
          echo github.repository: ${{ github.repository }}
          echo github.ref: "$GITHUB_REF"
          echo github.head_ref: "$HEAD_REF"
          echo github.base_ref: ${{ github.base_ref }}

  determine-networks:
    name: Determine Networks
    runs-on: ubuntu-latest
    outputs:
      networks: ${{ steps.determine.outputs.networks }}
    steps:
      - uses: actions/checkout@v4

      - name: "Determine vendors for the network"
        id: determine
        run: |
          networks=$(jq -r --arg vendor "${{ inputs.vendor }}" --arg network "${{ inputs.network }}" '
            if $network == "all" then
              .[$vendor] | @json
            else
              [$network] | @json
            end' packages/subgraph/tasks/vendorNetworkMap.json)
          if [ -z "$networks" ] || [ "$networks" == "null" ]; then
            echo "Unsupported vendor or network: ${{ inputs.vendor }} / ${{ inputs.network }}"
            exit 1
          fi
          echo "networks=$networks" >> "$GITHUB_OUTPUT"

  deploy-subgraph:
    name: Build and Deploy Subgraph

    runs-on: ubuntu-latest
    needs: determine-networks
    strategy:
      matrix:
        network: ${{ fromJson(needs.determine-networks.outputs.networks) }}
      fail-fast: false

    defaults:
      run:
        shell: nix develop .#ci-default -c bash {0}

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v19
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Install dependencies"
        run: yarn install --frozen-lockfile

      - name: "Build contracts"
        run: yarn build
        working-directory: ./packages/ethereum-contracts

      # Version is from subgraph@<version> git tag if exists, else short git commit revision
      - name: "Deploy to a node"
        run: |
          shortRev=$(git rev-parse --short ${{ github.sha }})
          versionTag=$(git tag --contains ${{ github.sha }} | grep "^subgraph@" | sed 's/^subgraph@//')
          versionLabel="${versionTag:-$shortRev}"
          ./tasks/deploy.sh -o ${{ inputs.vendor }} -n ${{ matrix.network }} -r ${{ inputs.deployment_env }} -v $versionLabel
        working-directory: ./packages/subgraph
        env:
          SUBGRAPH_URL_TEMPLATE: ${{ secrets.SUBGRAPH_URL_TEMPLATE }}
          SUPERFLUID_IPFS_API: ${{ secrets.SUPERFLUID_IPFS_API }}
          THE_GRAPH_ACCESS_TOKEN: ${{ secrets.THE_GRAPH_ACCESS_TOKEN }}
          SATSUMA_DEPLOY_KEY: ${{ secrets.SATSUMA_DEPLOY_KEY }}
          GOLDSKY_API_KEY: ${{ secrets.GOLDSKY_API_KEY }}
          AIRSTACK_API_KEY: ${{ secrets.AIRSTACK_API_KEY }}
          COMMIT_HASH: ${{ github.sha }}
          CONFIGURATION: ${{ inputs.deployment_env }}
