name: Reusable Workflow | Run Unit and Integration Tests on Local Subgraph

on:
  workflow_call:

env:
  # FIXME: subgraph test fails with node20
  DEV_SHELL_NAME: ci-node18

jobs:
  subgraph-unit-tests:
    name: Run subgraph unit tests
    runs-on: ubuntu-latest

    env:
      subgraph-working-directory: ./packages/subgraph

    defaults:
      run:
        shell: nix develop .#${{ env.DEV_SHELL_NAME }} -c bash -xe {0}

    steps:
      - uses: actions/checkout@v4

      - name: Setup workflow base
        id: base
        uses: ./.github/actions/setup-workflow-base
        with:
          package-name: subgraph
          cache-key-prefix: subgraph-unit-tests-
          dev-shell-name: ${{ env.DEV_SHELL_NAME }}

      - name: Install dependencies
        if: steps.base.outputs.cache-hit != 'true'
        run: |
          yarn install --frozen-lockfile
          npx tsc --version
          npx graph --version

      - name: Build ethereum contracts
        if: steps.base.outputs.cache-hit != 'true'
        run: |
          yarn lint
          yarn build
        working-directory: ./packages/ethereum-contracts

      - name: Run unit tests
        if: steps.base.outputs.cache-hit != 'true'
        run: yarn matchstick
        working-directory: ${{ env.subgraph-working-directory }}

  subgraph-integration-tests:
    name: Run subgraph integration tests

    runs-on: ubuntu-latest

    env:
      subgraph-working-directory: ./packages/subgraph
      sdk-core-working-directory: ./packages/sdk-core

    defaults:
      run:
        shell: nix develop .#${{ env.DEV_SHELL_NAME }} -c bash -xe {0}

    steps:
      - uses: actions/checkout@v4

      - name: Setup workflow base
        id: base
        uses: ./.github/actions/setup-workflow-base
        with:
          package-name: subgraph
          cache-key-prefix: subgraph-integration-tests-
          dev-shell-name: ${{ env.DEV_SHELL_NAME }}

      - name: Install dependencies
        if: steps.base.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Build contracts
        if: steps.base.outputs.cache-hit != 'true'
        run: yarn build
        working-directory: ./packages/ethereum-contracts

      - name: Build SDK core
        if: steps.base.outputs.cache-hit != 'true'
        # build sdk-core because subgraph tests use sdk-core
        run: yarn build
        working-directory: ${{ env.sdk-core-working-directory }}

      - name: Start hardhat node
        if: steps.base.outputs.cache-hit != 'true'
        run: ./tasks/startHardhatNode.sh start
        working-directory: ${{ env.sdk-core-working-directory }}

      - name: Deploy framework and tokens
        if: steps.base.outputs.cache-hit != 'true'
        run: npx hardhat run dev-scripts/run-deploy-contracts-and-token.js --network localhost
        working-directory: ./packages/ethereum-contracts

      - name: Prepare files for local testing
        if: steps.base.outputs.cache-hit != 'true'
        run: yarn prepare-local
        working-directory: ${{ env.subgraph-working-directory }}

      - name: Run setup-graph-node
        if: steps.base.outputs.cache-hit != 'true'
        run: |
          ./tasks/setup-graph-node.sh
        working-directory: ${{ env.subgraph-working-directory }}

      - name: Docker compose
        if: steps.base.outputs.cache-hit != 'true'
        run: |
          docker compose up --force-recreate --detach
        working-directory: ${{ env.subgraph-working-directory }}

      - name: Run subgraph integration test suite
        if: steps.base.outputs.cache-hit != 'true'
        run: |
          export DOCKER_HOST_GATEWAY_IP=$(docker network inspect bridge | jq -r '.[0].IPAM.Config[].Gateway')
          yarn test --network localhost
        working-directory: ${{ env.subgraph-working-directory }}
