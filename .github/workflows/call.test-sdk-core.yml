name: Reusable Workflow | Test SDK Core

on:
  workflow_call:
    inputs:
      subgraph-release:
        required: true
        type: string
      subgraph-endpoint:
        required: true
        type: string
      run-coverage-tests:
        required: true
        type: boolean

jobs:
  # When this scrip is written, it is the only way to preparing conditional matrix:
  # Ref: https://stackoverflow.com/questions/65384420/how-do-i-make-a-github-action-matrix-element-conditional
  matrix-prep:
    name: Preparing Conditional Strategy Matrix

    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Set matrix variable
        id: set-matrix
        run: |
          if [ "${{ inputs.run-coverage-tests }}" == "true" ];then
            echo "matrix={\"node-version\": [18]}" >> "$GITHUB_OUTPUT"
          else
            # FIXME: subgraph test fails with node20
            echo "matrix={\"node-version\": [18]}" >> "$GITHUB_OUTPUT"
          fi

  test-sdk-core:
    name: Test SDK-Core

    needs: [matrix-prep]

    runs-on: ubuntu-latest

    strategy:
      matrix: ${{ fromJson(needs.matrix-prep.outputs.matrix) }}

    env:
      DEV_SHELL_NAME: ci-node${{ matrix.node-version }}
      ethereum-contracts-working-directory: ./packages/ethereum-contracts
      subgraph-working-directory: ./packages/subgraph
      sdk-core-working-directory: ./packages/sdk-core

    defaults:
      run:
        shell: nix develop .#${{ env.DEV_SHELL_NAME }} -c bash -xe {0}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set cache key prefix
        id: set-cache-key-prefix
        run: |
          node_version=${{ matrix.node-version }}
          if [ "${{ inputs.run-coverage-tests }}" == false ]; then
            v=sdk-core-test-${node_version}-
          else
            v=sdk-core-coverage-${node_version}-
          fi
          echo "cache_key_prefix=$v" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Setup workflow base
        id: base
        uses: ./.github/actions/setup-workflow-base
        with:
          package-name: sdk-core
          cache-key-prefix: ${{ steps.set-cache-key-prefix.outputs.cache_key_prefix }}
          dev-shell-name: ${{ env.DEV_SHELL_NAME }}

      - name: Install dependencies
        if: steps.base.outputs.cache-hit != 'true'
        run: |
          yarn install --frozen-lockfile
          npx tsc --version
          npx hardhat --version

      - name: Lint and build essentials
        if: steps.base.outputs.cache-hit != 'true'
        run: |
          yarn lint
          yarn build
        working-directory: ${{ env.ethereum-contracts-working-directory }}

      - name: Start hardhat node
        if: steps.base.outputs.cache-hit != 'true'
        run: |
          ./tasks/startHardhatNode.sh start
        working-directory: ${{ env.sdk-core-working-directory }}

      - name: Build SDK Core
        if: steps.base.outputs.cache-hit != 'true'
        # build sdk-core because of auto linking to dependency
        run: |
          yarn lint
          yarn build
        working-directory: ${{ env.sdk-core-working-directory }}

      - name: Deploy Framework and Tokens
        if: steps.base.outputs.cache-hit != 'true'
        run: npx hardhat run dev-scripts/run-deploy-contracts-and-token.js --network localhost
        working-directory: ${{ env.ethereum-contracts-working-directory }}

      - name: Prepare files for local testing
        if: steps.base.outputs.cache-hit != 'true'
        run: yarn prepare-local
        working-directory: ${{ env.subgraph-working-directory }}

      - name: Run setup-graph-node
        if: steps.base.outputs.cache-hit != 'true'
        run: |
          ./tasks/setup-graph-node.sh
        working-directory: ${{ env.subgraph-working-directory }}

      - name: Docker compose
        if: steps.base.outputs.cache-hit != 'true'
        run: |
          docker rm subgraph_graph-node_1 || true
          docker compose up &
        working-directory: ${{ env.subgraph-working-directory }}

      - name: Build and deploy local subgraph
        if: steps.base.outputs.cache-hit != 'true'
        run: |
          yarn build-and-deploy-local
          # artificial slow down to give the subgraph time to sync
          sleep 30
        working-directory: ${{ env.subgraph-working-directory }}

      - name: Run test suite
        if: steps.base.outputs.cache-hit != 'true' && inputs.run-coverage-tests == false
        run: |
          yarn get-graphql-schema:${{ inputs.subgraph-release }}
          ./tasks/setupTestEnvironment.sh
          npx hardhat test --network localhost
        working-directory: ${{ env.sdk-core-working-directory }}
        env:
          SUBGRAPH_RELEASE_TAG: ${{ inputs.subgraph-release }}
          SUBGRAPH_ENDPOINT: ${{ inputs.subgraph-endpoint }}

      - name: Run coverage test
        if: steps.base.outputs.cache-hit != 'true' && inputs.run-coverage-tests == true
        run: |
          yarn workspace @superfluid-finance/sdk-core test-coverage
        working-directory: ${{ env.sdk-core-working-directory }}
        env:
          SUBGRAPH_RELEASE_TAG: ${{ inputs.subgraph-release }}
          SUBGRAPH_ENDPOINT: ${{ inputs.subgraph-endpoint }}

      - name: Create coverage artifact
        if: inputs.run-coverage-tests == true
        uses: actions/upload-artifact@v4
        with:
          name: sdk-core-coverage
          path: |
            packages/sdk-core/coverage/
