name: CI Feature Branches

on:
  # triggered by internal pushes
  push:
    branches-ignore: ["master", "dev"]
  # triggered by external PRs (filtered in the `check` job)
  pull_request:

jobs:
  check:

    runs-on: ubuntu-latest

    outputs:
      build_ethereum_contracts: ${{ env.BUILD_ETHEREUM_CONTRACTS }}
      build_js_sdk: ${{ env.BUILD_JS_SDK }}
      build_subgraph: ${{ env.BUILD_SUBGRAPH }}
      build_sdk_core: ${{ env.BUILD_SDK_CORE }}

    # triggered by internal pushes or external PRs
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != 'superfluid-finance/protocol-monorepo'

    steps:
      - name: Show contexts
        run: |
          echo github.event_name: ${{ github.event_name }}
          echo github.sha: ${{ github.sha }}
          echo github.repository: ${{ github.repository }}
          echo github.ref: ${{ github.ref }}
          echo github.head_ref: ${{ github.head_ref }}
          echo github.base_ref: ${{ github.base_ref }}

      - uses: actions/checkout@v2

      - name: Check changeset
        run: tasks/check-changeset.sh ${{ github.sha }} dev

  test-ethereum-contracts:
    name: Build and test ethereum-contracts (Feature Branch)

    runs-on: ubuntu-latest

    needs: [check]
    if: needs.check.outputs.build_ethereum_contracts

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2

      - name: Check changeset
        run: tasks/check-changeset.sh ${{ github.sha }} dev

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install, lint and build
        run: |
          yarn install --frozen-lockfile
          yarn lint
          yarn build

      - name: Test ethereum-contracts
        run: |
          yarn workspace @superfluid-finance/ethereum-contracts test

  coverage-ethereum-contracts:
    name: Build and test coverage of ethereum-contracts (Feature Branch)

    runs-on: ubuntu-latest

    needs: [check]
    if: needs.check.outputs.build_ethereum_contracts

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Install and build
        run: |
          yarn install --frozen-lockfile
          yarn build

      - name: Run coverage test
        run: |
          yarn workspace @superfluid-finance/ethereum-contracts test-coverage

  test-js-sdk:
    name: Build and test js-sdk (Feature Branch)

    runs-on: ubuntu-latest

    needs: [check]
    if: needs.check.outputs.build_js_sdk

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install, lint and build
        run: |
          yarn install --frozen-lockfilepull_request
          yarn lint
          yarn build

      - name: Test js-sdk
        run: |
          yarn workspace @superfluid-finance/js-sdk test
        env:
          GOERLI_PROVIDER_URL: ${{ secrets.GOERLI_PROVIDER_URL }}

  test-subgraph:
    name: Build and test subgraph (Feature Branch)

    runs-on: ubuntu-latest

    env:
      subgraph-working-directory: ./packages/subgraph
      contracts-working-directory: ./packages/ethereum-contracts
      js-sdk-working-directory: ./packages/js-sdk

    needs: [check]
    if: needs.check.outputs.build_subgraph

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: "Checkout graph node repo and set up local graph node"
        uses: actions/checkout@v2
        with:
          repository: graphprotocol/graph-node
          path: graph-node
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Run setup because linux and docker-compose"
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          chmod +x setup.sh
          ./setup.sh
        working-directory: ./graph-node/docker
      
      - name: "Docker compose"
        run: docker-compose up &
        working-directory: ./graph-node/docker
      
      - name: "Install yarn and ganache-cli"
        run: npm install -g yarn ganache-cli

      - name: "Run ganache-cli node"
        run: ganache-cli -h 0.0.0.0 -m "test test test test test test test test test test test junk" &
        working-directory: ${{ env.subgraph-working-directory }}

      - name: "Install contract dependencies"
        run: yarn install
        working-directory: ${{ env.contracts-working-directory }}

      - name: "Build contracts"
        run: yarn run build:contracts
        working-directory: ${{ env.contracts-working-directory }}

      - name: "Generate Typechain files and move to subgraph directory"
        run: |
          yarn run generate-ethers-types
          mv typechain ../subgraph
        working-directory: ${{ env.contracts-working-directory }}

      - name: "Install subgraph dependencies"
        run: yarn install
        working-directory: ${{ env.subgraph-working-directory }}

      - name: "Get ABI for subgraph.yaml"
        run: node scripts/getAbi.js
        working-directory: ${{ env.subgraph-working-directory }}

      - name: "Get abi.js file for js-sdk to deploy locally"
        run: |
          chmod +x ./tasks/build-abi-js.sh
          ./tasks/build-abi-js.sh
        working-directory: ${{ env.js-sdk-working-directory }}

      - name: "Deploy contracts and token locally"
        run: yarn deploy-contracts-local
        working-directory: ${{ env.subgraph-working-directory }}

      - name: "Prepare, set network, build and deploy subgraph locally"
        run: yarn build-and-deploy-local
        working-directory: ${{ env.subgraph-working-directory }}

      - name: "Run integration test suite"
        run: npx hardhat test --network localhost
        working-directory: ${{ env.subgraph-working-directory }}
  
  test-sdk-core:
    name: Test sdk-core (feature branch)

    runs-on: ubuntu-latest

    env:
      subgraph-working-directory: ./packages/subgraph
      contracts-working-directory: ./packages/ethereum-contracts
      js-sdk-working-directory: ./packages/js-sdk
      sdk-core-working-directory: ./packages/sdk-core

    needs: [check]
    if: needs.check.outputs.build_sdk_core

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: "Install yarn and ganache-cli"
        run: npm install -g yarn ganache-cli

      - name: "Run ganache-cli node"
        run: ganache-cli -h 0.0.0.0 -m "test test test test test test test test test test test junk" &
        working-directory: ${{ env.subgraph-working-directory }}

      - name: "Install contract dependencies"
        run: yarn install
        working-directory: ${{ env.contracts-working-directory }}

      - name: "Build contracts"
        run: yarn run build:contracts
        working-directory: ${{ env.contracts-working-directory }}

      - name: "Get abi.js file for js-sdk to deploy locally"
        run: |
          chmod +x ./tasks/build-abi-js.sh
          ./tasks/build-abi-js.sh
        working-directory: ${{ env.js-sdk-working-directory }}

      - name: "Deploy contracts and token locally"
        run: yarn deploy-contracts-local
        working-directory: ${{ env.subgraph-working-directory }}

      - name: "Generate ABI and typechain files"
        run: yarn generate-abi-files && yarn generate-web3-types
        working-directory: ${{ env.sdk-core-working-directory }}

      - name: "Run test suite"
        run: | 
          yarn test
        working-directory: ${{ env.sdk-core-working-directory }}
        env: 
          MATIC_PROVIDER_URL: ${{ secrets.MATIC_PROVIDER_URL }}

  all-packages-tested:
    name: All packages tested (Feature Branch)

    runs-on: ubuntu-latest

    if: (github.event_name == 'push' || github.event.pull_request.head.repo.full_name != 'superfluid-finance/protocol-monorepo') && always()
    needs: [test-ethereum-contracts, coverage-ethereum-contracts, test-js-sdk, test-subgraph, test-sdk-core]

    steps:
      - name: Test Results
        run: |
          function check_result() {
            local package_name="$1"
            local result="$2"
            if [ "$result" == "skipped" ];then
              echo "Skipped $package_name package."
            else
              echo "Checking if $package_name package test passes..."
              test "$result" == "success"
              echo "Passed."
            fi
          }
          check_result ethereum-contracts ${{ needs.test-ethereum-contracts.result }}
          check_result js-sdk ${{ needs.test-js-sdk.result }}
          check_result subgraph ${{ needs.test-subgraph.result }}
          check_result sdk-core ${{ needs.test-sdk-core.result }}
