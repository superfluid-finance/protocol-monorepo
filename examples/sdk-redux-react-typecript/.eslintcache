[{"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/index.tsx":"1","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/theme.ts":"2","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/redux/store.ts":"3","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/App.tsx":"4","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/InitializeSuperfluidSdk.tsx":"5","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/Loader.tsx":"6","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/SignerContext.tsx":"7","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/TransactionTable.tsx":"8","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListStreams.tsx":"9","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListEvents.tsx":"10","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListIndexes.tsx":"11","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/GetRealtimeBalance.tsx":"12","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListUserInteractedSuperTokens.tsx":"13","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListIndexSubscriptions.tsx":"14","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListSuperTokens.tsx":"15","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/CreateStream.tsx":"16","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/UpgradeToSuperToken.tsx":"17","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/UpdateStream.tsx":"18","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/DowngradeFromSuperToken.tsx":"19","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/DeleteStream.tsx":"20","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/CreateIndex.tsx":"21","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/DistributeToIndex.tsx":"22","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ApproveIndexSubscription.tsx":"23","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ClaimFromIndexSubscription.tsx":"24","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/UpdateIndexSubscriptionUnits.tsx":"25","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/DeleteIndexSubscription.tsx":"26","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/RevokeIndexSubscription.tsx":"27","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/MonitorForEventsToInvalidateCache.tsx":"28","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/Error.tsx":"29","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/FlowingBalance.tsx":"30","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/redux/hooks.ts":"31"},{"size":636,"mtime":1639057182070,"results":"32","hashOfConfig":"33"},{"size":138,"mtime":1639057182070,"results":"34","hashOfConfig":"33"},{"size":932,"mtime":1639441015526,"results":"35","hashOfConfig":"33"},{"size":11966,"mtime":1639437613826,"results":"36","hashOfConfig":"33"},{"size":3747,"mtime":1639438310959,"results":"37","hashOfConfig":"33"},{"size":259,"mtime":1639057182070,"results":"38","hashOfConfig":"33"},{"size":144,"mtime":1639057182070,"results":"39","hashOfConfig":"33"},{"size":2402,"mtime":1639437613826,"results":"40","hashOfConfig":"33"},{"size":7412,"mtime":1639437613826,"results":"41","hashOfConfig":"33"},{"size":4148,"mtime":1639437613826,"results":"42","hashOfConfig":"33"},{"size":8604,"mtime":1639437613826,"results":"43","hashOfConfig":"33"},{"size":6742,"mtime":1639437613826,"results":"44","hashOfConfig":"33"},{"size":10653,"mtime":1639437613826,"results":"45","hashOfConfig":"33"},{"size":9399,"mtime":1639437613826,"results":"46","hashOfConfig":"33"},{"size":6502,"mtime":1639437613826,"results":"47","hashOfConfig":"33"},{"size":3255,"mtime":1639437613826,"results":"48","hashOfConfig":"33"},{"size":3423,"mtime":1639437613826,"results":"49","hashOfConfig":"33"},{"size":3255,"mtime":1639437613826,"results":"50","hashOfConfig":"33"},{"size":2820,"mtime":1639437613826,"results":"51","hashOfConfig":"33"},{"size":2796,"mtime":1639437613826,"results":"52","hashOfConfig":"33"},{"size":3148,"mtime":1639437613826,"results":"53","hashOfConfig":"33"},{"size":3563,"mtime":1639437613826,"results":"54","hashOfConfig":"33"},{"size":3607,"mtime":1639437613826,"results":"55","hashOfConfig":"33"},{"size":3651,"mtime":1639437613826,"results":"56","hashOfConfig":"33"},{"size":4025,"mtime":1639437613826,"results":"57","hashOfConfig":"33"},{"size":3650,"mtime":1639437613826,"results":"58","hashOfConfig":"33"},{"size":3603,"mtime":1639437613826,"results":"59","hashOfConfig":"33"},{"size":1866,"mtime":1639437613826,"results":"60","hashOfConfig":"33"},{"size":611,"mtime":1639057182070,"results":"61","hashOfConfig":"33"},{"size":1883,"mtime":1639057182070,"results":"62","hashOfConfig":"33"},{"size":350,"mtime":1639057182070,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qtjbi7",{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/index.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/theme.ts",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/redux/store.ts",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/App.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/InitializeSuperfluidSdk.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/Loader.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/SignerContext.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/TransactionTable.tsx",["140"],"import React, { FC, ReactElement, useContext } from \"react\";\nimport {\n    TrackedTransaction,\n    transactionSelectors,\n} from \"@superfluid-finance/sdk-redux\";\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n} from \"@mui/material\";\nimport { SignerContext } from \"../SignerContext\";\nimport { useAppSelector } from \"../redux/hooks\";\n\nexport const TransactionTable: FC = (): ReactElement => {\n    const [networkName, signerAddress] = useContext(SignerContext);\n\n    const transactions = useAppSelector((state) =>\n        transactionSelectors.selectAll(state.sfTransactions)\n    );\n\n    return (\n        <>\n            {\n                <TableContainer>\n                    <Table aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Network</TableCell>\n                                <TableCell>Hash</TableCell>\n                                <TableCell>Status</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {transactions!.map(\n                                (transaction: TrackedTransaction) => (\n                                    <TableRow\n                                        key={transaction.hash}\n                                        sx={{\n                                            \"&:last-child td, &:last-child th\":\n                                                {\n                                                    border: 0,\n                                                },\n                                        }}\n                                    >\n                                        <TableCell>{networkName}</TableCell>\n                                        <TableCell>\n                                            {transaction.hash}\n                                        </TableCell>\n                                        <TableCell>\n                                            {transaction.status.toString()}\n                                        </TableCell>\n                                    </TableRow>\n                                )\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            }\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListStreams.tsx",["141","142"],"import React, {\n    FC,\n    ReactElement,\n    SyntheticEvent,\n    useContext,\n    useEffect,\n    useState,\n} from \"react\";\nimport { IStream } from \"@superfluid-finance/sdk-core\";\nimport { Loader } from \"../Loader\";\nimport {\n    FormGroup,\n    Pagination,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n} from \"@mui/material\";\nimport { SignerContext } from \"../SignerContext\";\nimport { Error } from \"../Error\";\nimport { FlowingBalance } from \"../FlowingBalance\";\nimport { ethers } from \"ethers\";\nimport { sfApi } from \"../redux/store\";\n\nconst pageSize = 10;\n\nexport const ListStreams: FC = (): ReactElement => {\n    const [chainId, signerAddress] = useContext(SignerContext);\n    const [page, setPage] = useState<number>(1);\n    const [queryChainId, setQueryChainId] = useState<number>(chainId);\n\n    const [superTokenAddress, setSuperTokenAddress] = useState<string>(\"\");\n    const [senderAddress, setSenderAddress] = useState<string>(\"\");\n    const [receiverAddress, setReceiverAddress] = useState<string>(\"\");\n\n    useEffect(() => {\n        setPage(1);\n    }, [queryChainId, senderAddress, receiverAddress, superTokenAddress]);\n\n    const {\n        data: pagedStreams,\n        isFetching,\n        isLoading,\n        error,\n        refetch,\n    } = sfApi.useListStreamsQuery({\n        chainId: queryChainId,\n        senderAddress,\n        receiverAddress,\n        superTokenAddress,\n        skip: (page - 1) * pageSize,\n        take: pageSize,\n    });\n\n    return (\n        <>\n            <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                <FormGroup>\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Chain ID\"\n                        value={queryChainId}\n                        onChange={(e) =>\n                            setQueryChainId(Number(e.currentTarget.value))\n                        }\n                    />\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"SuperToken\"\n                        value={superTokenAddress}\n                        onChange={(e) =>\n                            setSuperTokenAddress(e.currentTarget.value)\n                        }\n                    />\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Sender\"\n                        value={senderAddress}\n                        onChange={(e) =>\n                            setSenderAddress(e.currentTarget.value)\n                        }\n                    />\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Receiver\"\n                        value={receiverAddress}\n                        onChange={(e) =>\n                            setReceiverAddress(e.currentTarget.value)\n                        }\n                    />\n                </FormGroup>\n            </form>\n            {\n                <>\n                    {isFetching ? (\n                        <Loader />\n                    ) : error ? (\n                        <Error error={error} retry={refetch} />\n                    ) : (\n                        <TableContainer>\n                            <Table aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>SuperToken</TableCell>\n                                        <TableCell>Sender</TableCell>\n                                        <TableCell>Receiver</TableCell>\n                                        <TableCell>Flow Rate</TableCell>\n                                        <TableCell>Total Streamed</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {pagedStreams!.data.map(\n                                        (flow: IStream, index: number) => (\n                                            <TableRow\n                                                key={index}\n                                                sx={{\n                                                    \"&:last-child td, &:last-child th\":\n                                                        {\n                                                            border: 0,\n                                                        },\n                                                }}\n                                            >\n                                                <TableCell>\n                                                    {flow.token.id}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {flow.sender}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {flow.receiver}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {flow.currentFlowRate}\n                                                </TableCell>\n                                                <TableCell>\n                                                    <FlowingBalance\n                                                        format={(x) =>\n                                                            ethers.utils.formatUnits(\n                                                                x\n                                                            )\n                                                        }\n                                                        balanceWei={\n                                                            flow.streamedUntilUpdatedAt\n                                                        }\n                                                        balanceTimestamp={\n                                                            flow.updatedAtTimestamp\n                                                        }\n                                                        flowRateWei={\n                                                            flow.currentFlowRate\n                                                        }\n                                                    />\n                                                </TableCell>\n                                            </TableRow>\n                                        )\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    )}\n                    {pagedStreams && !error && (\n                        <Pagination\n                            count={pagedStreams.nextPaging ? page + 1 : page}\n                            page={page}\n                            onChange={(\n                                event: React.ChangeEvent<unknown>,\n                                value: number\n                            ) => {\n                                setPage(value);\n                            }}\n                        />\n                    )}\n                </>\n            }\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListEvents.tsx",["143"],"import React, {\n    FC,\n    ReactElement,\n    SyntheticEvent,\n    useContext,\n    useState,\n    useEffect,\n} from \"react\";\nimport { AllEvents } from \"@superfluid-finance/sdk-core\";\nimport { Loader } from \"../Loader\";\nimport {\n    FormGroup,\n    Pagination,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n} from \"@mui/material\";\nimport { SignerContext } from \"../SignerContext\";\nimport { Error } from \"../Error\";\nimport { sfApi } from \"../redux/store\";\n\nconst pageSize = 10;\n\nexport const ListEvents: FC = (): ReactElement => {\n    const [chainId, signerAddress] = useContext(SignerContext);\n    const [page, setPage] = useState<number>(1);\n    const [queryChainId, setQueryChainId] = useState<number>(chainId);\n    const [accountAddress, setAccountAddress] = useState<string>(signerAddress);\n\n    useEffect(() => {\n        setPage(1);\n    }, [queryChainId, accountAddress]);\n\n    const {\n        data: pagedEvents,\n        isFetching,\n        isLoading,\n        error,\n        refetch,\n    } = sfApi.useListEventsQuery(\n        {\n            chainId: queryChainId,\n            accountAddress,\n            timestamp_gt: undefined,\n            skip: (page - 1) * pageSize,\n            take: pageSize,\n        },\n        {\n            pollingInterval: 7500,\n        }\n    );\n\n    return (\n        <>\n            <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                <FormGroup>\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Chain ID\"\n                        value={queryChainId}\n                        onChange={(e) =>\n                            setQueryChainId(Number(e.currentTarget.value))\n                        }\n                    />\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Address\"\n                        value={accountAddress}\n                        onChange={(e) =>\n                            setAccountAddress(e.currentTarget.value)\n                        }\n                    />\n                </FormGroup>\n            </form>\n            {\n                <>\n                    {isLoading ? (\n                        <Loader />\n                    ) : error ? (\n                        <Error error={error} retry={refetch} />\n                    ) : (\n                        <TableContainer>\n                            <Table aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Event</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {pagedEvents!.data.map(\n                                        (event: AllEvents, index: number) => (\n                                            <TableRow key={index}>\n                                                <TableCell>\n                                                    <pre>\n                                                        {JSON.stringify(event)}\n                                                    </pre>\n                                                </TableCell>\n                                            </TableRow>\n                                        )\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    )}\n                    {pagedEvents && !error && (\n                        <Pagination\n                            count={pagedEvents.nextPaging ? page + 1 : page}\n                            page={page}\n                            onChange={(\n                                event: React.ChangeEvent<unknown>,\n                                value: number\n                            ) => {\n                                setPage(value);\n                            }}\n                        />\n                    )}\n                </>\n            }\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListIndexes.tsx",["144"],"import React, {\n    FC,\n    ReactElement,\n    SyntheticEvent,\n    useContext,\n    useEffect,\n    useState,\n} from \"react\";\nimport { IIndex } from \"@superfluid-finance/sdk-core\";\nimport { Loader } from \"../Loader\";\nimport {\n    FormGroup,\n    Pagination,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n} from \"@mui/material\";\nimport { SignerContext } from \"../SignerContext\";\nimport { Error } from \"../Error\";\nimport { sfApi } from \"../redux/store\";\n\nconst pageSize = 10;\n\nexport const ListIndexes: FC = (): ReactElement => {\n    const [chainId, signerAddress] = useContext(SignerContext);\n    const [page, setPage] = useState<number>(1);\n    const [queryChainId, setQueryChainId] = useState<number>(chainId);\n\n    const [indexId, setIndexId] = useState<string>(\"\");\n    const [publisherAddress, setPublisherAddress] =\n        useState<string>(signerAddress);\n    const [superTokenAddress, setSuperTokenAddress] = useState<string>(\"\");\n\n    useEffect(() => {\n        setPage(1);\n    }, [queryChainId, indexId, publisherAddress, superTokenAddress]);\n\n    const {\n        data: pagedIndexes,\n        isFetching,\n        isLoading,\n        error,\n        refetch,\n    } = sfApi.useListIndexesQuery({\n        chainId: queryChainId,\n        indexId: indexId,\n        publisherAddress,\n        superTokenAddress,\n        skip: (page - 1) * pageSize,\n        take: pageSize,\n    });\n\n    return (\n        <>\n            <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                <FormGroup>\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Chain ID\"\n                        value={queryChainId}\n                        onChange={(e) =>\n                            setQueryChainId(Number(e.currentTarget.value))\n                        }\n                    />\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Index ID\"\n                        value={indexId}\n                        onChange={(e) => setIndexId(e.currentTarget.value)}\n                    />\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Publisher Address\"\n                        value={publisherAddress}\n                        onChange={(e) =>\n                            setPublisherAddress(e.currentTarget.value)\n                        }\n                    />\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"SuperToken Address\"\n                        value={superTokenAddress}\n                        onChange={(e) =>\n                            setSuperTokenAddress(e.currentTarget.value)\n                        }\n                    />\n                </FormGroup>\n            </form>\n            {\n                <>\n                    {isFetching ? (\n                        <Loader />\n                    ) : error ? (\n                        <Error error={error} retry={refetch} />\n                    ) : (\n                        <TableContainer>\n                            <Table aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            createdAtTimestamp\n                                        </TableCell>\n                                        <TableCell>\n                                            createdAtBlockNumber\n                                        </TableCell>\n                                        <TableCell>\n                                            updatedAtTimestamp\n                                        </TableCell>\n                                        <TableCell>\n                                            updatedAtBlockNumber\n                                        </TableCell>\n                                        <TableCell>indexId</TableCell>\n                                        <TableCell>indexValue</TableCell>\n                                        <TableCell>\n                                            totalSubscriptionsWithUnits\n                                        </TableCell>\n                                        <TableCell>totalUnitsPending</TableCell>\n                                        <TableCell>\n                                            totalUnitsApproved\n                                        </TableCell>\n                                        <TableCell>totalUnits</TableCell>\n                                        <TableCell>\n                                            totalAmountDistributedUntilUpdatedAt\n                                        </TableCell>\n                                        <TableCell>token</TableCell>\n                                        <TableCell>publisher</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {pagedIndexes!.data.map((index: IIndex) => (\n                                        <TableRow key={index.id}>\n                                            <TableCell>\n                                                {index.createdAtTimestamp}\n                                            </TableCell>\n                                            <TableCell>\n                                                {index.createdAtBlockNumber}\n                                            </TableCell>\n                                            <TableCell>\n                                                {index.updatedAtTimestamp}\n                                            </TableCell>\n                                            <TableCell>\n                                                {index.updatedAtBlockNumber}\n                                            </TableCell>\n                                            <TableCell>\n                                                {index.indexId}\n                                            </TableCell>\n                                            <TableCell>\n                                                {index.indexValue}\n                                            </TableCell>\n                                            <TableCell>\n                                                {\n                                                    index.totalSubscriptionsWithUnits\n                                                }\n                                            </TableCell>\n                                            <TableCell>\n                                                {index.totalUnitsPending}\n                                            </TableCell>\n                                            <TableCell>\n                                                {index.totalUnitsApproved}\n                                            </TableCell>\n                                            <TableCell>\n                                                {index.totalUnits}\n                                            </TableCell>\n                                            <TableCell>\n                                                {\n                                                    index.totalAmountDistributedUntilUpdatedAt\n                                                }\n                                            </TableCell>\n                                            <TableCell>\n                                                {index.token.name} (\n                                                {index.token.id})\n                                            </TableCell>\n                                            <TableCell>\n                                                {index.publisher}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    )}\n                    {pagedIndexes && !error && (\n                        <Pagination\n                            count={pagedIndexes.nextPaging ? page + 1 : page}\n                            onChange={(\n                                event: React.ChangeEvent<unknown>,\n                                value: number\n                            ) => setPage(value)}\n                        />\n                    )}\n                </>\n            }\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/GetRealtimeBalance.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListUserInteractedSuperTokens.tsx",["145"],"import React, {\n    FC,\n    ReactElement,\n    SyntheticEvent,\n    useContext,\n    useEffect,\n    useState,\n} from \"react\";\nimport {\n    ILightAccountTokenSnapshot,\n} from \"@superfluid-finance/sdk-core\";\nimport { Loader } from \"../Loader\";\nimport {\n    FormGroup,\n    Pagination,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n} from \"@mui/material\";\nimport { SignerContext } from \"../SignerContext\";\nimport { Error } from \"../Error\";\nimport { sfApi } from \"../redux/store\";\n\nconst pageSize = 10;\n\nexport const ListUserInteractedSuperTokens: FC = (): ReactElement => {\n    const [chainId, signerAddress] = useContext(SignerContext);\n    const [page, setPage] = useState<number>(1);\n    const [queryChainId, setQueryChainId] = useState<number>(chainId);\n\n    const [accountAddress, setAccountAddress] = useState<string>(signerAddress);\n    const [superTokenAddress, setSuperTokenAddress] = useState(\"\");\n\n    useEffect(() => {\n        setPage(1);\n    }, [queryChainId, superTokenAddress, accountAddress]);\n\n    const {\n        data: pagedIndexSubscriptions,\n        isFetching,\n        isLoading,\n        error,\n        refetch,\n    } = sfApi.useListUserInteractedSuperTokensQuery({\n        accountAddress,\n        superTokenAddress,\n        chainId: queryChainId,\n        skip: (page - 1) * pageSize,\n        take: pageSize,\n    });\n\n    return (\n        <>\n            <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                <FormGroup>\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Chain ID\"\n                        value={queryChainId}\n                        onChange={(e) =>\n                            setQueryChainId(Number(e.currentTarget.value))\n                        }\n                    />\n                    <TextField\n                        sx={{ m: 1 }}\n                        value={accountAddress}\n                        label=\"Account Address\"\n                        onChange={(e) =>\n                            setAccountAddress(e.currentTarget.value)\n                        }\n                    />\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"SuperToken Address\"\n                        value={superTokenAddress}\n                        onChange={(e) =>\n                            setSuperTokenAddress(e.currentTarget.value)\n                        }\n                    />\n                </FormGroup>\n            </form>\n            {\n                <>\n                    {isFetching ? (\n                        <Loader />\n                    ) : error ? (\n                        <Error error={error} retry={refetch} />\n                    ) : (\n                        <TableContainer>\n                            <Table aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            updatedAtTimestamp\n                                        </TableCell>\n                                        <TableCell>\n                                            updatedAtBlockNumber\n                                        </TableCell>\n                                        <TableCell>\n                                            totalNumberOfActiveStreams\n                                        </TableCell>\n                                        <TableCell>\n                                            totalNumberOfClosedStreams\n                                        </TableCell>\n                                        <TableCell>\n                                            totalSubscriptionsWithUnits\n                                        </TableCell>\n                                        <TableCell>\n                                            totalApprovedSubscriptions\n                                        </TableCell>\n                                        <TableCell>\n                                            balanceUntilUpdatedAt\n                                        </TableCell>\n                                        <TableCell>totalNetFlowRate</TableCell>\n                                        <TableCell>totalInflowRate</TableCell>\n                                        <TableCell>totalOutflowRate</TableCell>\n                                        <TableCell>\n                                            totalAmountStreamedUntilUpdatedAt\n                                        </TableCell>\n                                        <TableCell>\n                                            totalAmountTransferredUntilUpdatedAt\n                                        </TableCell>\n                                        <TableCell>account</TableCell>\n                                        <TableCell>token</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {pagedIndexSubscriptions!.data.map(\n                                        (\n                                            tokenSnapshot: ILightAccountTokenSnapshot\n                                        ) => (\n                                            <TableRow key={tokenSnapshot.id}>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.updatedAtTimestamp\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.updatedAtBlockNumber\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.totalNumberOfActiveStreams\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.totalNumberOfClosedStreams\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.totalSubscriptionsWithUnits\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.totalApprovedSubscriptions\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.balanceUntilUpdatedAt\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.totalNetFlowRate\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.totalInflowRate\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.totalOutflowRate\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.totalAmountStreamedUntilUpdatedAt\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        tokenSnapshot.totalAmountTransferredUntilUpdatedAt\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {tokenSnapshot.account}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {tokenSnapshot.token.name} (\n                                                    {tokenSnapshot.token.id})\n                                                </TableCell>\n                                            </TableRow>\n                                        )\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    )}\n                    {pagedIndexSubscriptions && !error && (\n                        <Pagination\n                            count={\n                                pagedIndexSubscriptions.nextPaging\n                                    ? page + 1\n                                    : page\n                            }\n                            onChange={(\n                                event: React.ChangeEvent<unknown>,\n                                value: number\n                            ) => setPage(value)}\n                        />\n                    )}\n                </>\n            }\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListIndexSubscriptions.tsx",["146"],"import React, {\n    FC,\n    ReactElement,\n    SyntheticEvent,\n    useContext,\n    useEffect,\n    useState,\n} from \"react\";\nimport { Loader } from \"../Loader\";\nimport {\n    FormControl,\n    FormControlLabel,\n    FormGroup,\n    Pagination,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    RadioGroup,\n    Radio,\n} from \"@mui/material\";\nimport { SignerContext } from \"../SignerContext\";\nimport { Error } from \"../Error\";\nimport { sfApi } from \"../redux/store\";\nimport { IIndexSubscription } from \"@superfluid-finance/sdk-core\";\n\nconst pageSize = 10;\n\nexport const ListIndexSubscriptions: FC = (): ReactElement => {\n    const [chainId, signerAddress] = useContext(SignerContext);\n    const [page, setPage] = useState<number>(1);\n    const [queryChainId, setQueryChainId] = useState<number>(chainId);\n\n    const [subscriberAddress, setSubscriberAddress] =\n        useState<string>(signerAddress);\n    const [isApproved, setIsApproved] = useState<boolean | undefined>();\n\n    useEffect(() => {\n        setPage(1);\n    }, [queryChainId, isApproved, subscriberAddress]);\n\n    const {\n        data: pagedIndexSubscriptions,\n        isFetching,\n        isLoading,\n        error,\n        refetch,\n    } = sfApi.useListIndexSubscriptionsQuery({\n        chainId: queryChainId,\n        subscriberAddress,\n        approved: isApproved,\n        skip: (page - 1) * pageSize,\n        take: pageSize,\n    });\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setIsApproved((event.target as HTMLInputElement).value === \"true\");\n    };\n\n    return (\n        <>\n            <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                <FormGroup>\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Chain ID\"\n                        value={queryChainId}\n                        onChange={(e) =>\n                            setQueryChainId(Number(e.currentTarget.value))\n                        }\n                    />\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Subscriber Address\"\n                        value={subscriberAddress}\n                        onChange={(e) =>\n                            setSubscriberAddress(e.currentTarget.value)\n                        }\n                    />\n                    <FormControl component=\"fieldset\">\n                        <RadioGroup\n                            row\n                            name=\"row-radio-buttons-group\"\n                            value={isApproved}\n                            onChange={handleChange}\n                        >\n                            <FormControlLabel\n                                value=\"true\"\n                                control={<Radio />}\n                                label=\"Approved\"\n                            />\n                            <FormControlLabel\n                                value=\"false\"\n                                control={<Radio />}\n                                label=\"Not Approved\"\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </FormGroup>\n            </form>\n            {\n                <>\n                    {isFetching ? (\n                        <Loader />\n                    ) : error ? (\n                        <Error error={error} retry={refetch} />\n                    ) : (\n                        <TableContainer>\n                            <Table aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            createdAtTimestamp\n                                        </TableCell>\n                                        <TableCell>\n                                            createdAtBlockNumber\n                                        </TableCell>\n                                        <TableCell>\n                                            updatedAtTimestamp\n                                        </TableCell>\n                                        <TableCell>\n                                            updatedAtBlockNumber\n                                        </TableCell>\n                                        <TableCell>subscriber</TableCell>\n                                        <TableCell>approved</TableCell>\n                                        <TableCell>units</TableCell>\n                                        <TableCell>\n                                            totalAmountReceivedUntilUpdatedAt\n                                        </TableCell>\n                                        <TableCell>\n                                            indexValueUntilUpdatedAt\n                                        </TableCell>\n                                        <TableCell>index</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {pagedIndexSubscriptions!.data.map(\n                                        (\n                                            indexSubscription: IIndexSubscription\n                                        ) => (\n                                            <TableRow\n                                                key={indexSubscription.id}\n                                            >\n                                                <TableCell>\n                                                    {\n                                                        indexSubscription.createdAtTimestamp\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        indexSubscription.createdAtBlockNumber\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        indexSubscription.updatedAtTimestamp\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        indexSubscription.updatedAtBlockNumber\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        indexSubscription.subscriber\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {indexSubscription.approved}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {indexSubscription.units}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        indexSubscription.totalAmountReceivedUntilUpdatedAt\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    W\n                                                    {\n                                                        indexSubscription.indexValueUntilUpdatedAt\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {indexSubscription.index.id}\n                                                </TableCell>\n                                            </TableRow>\n                                        )\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    )}\n                    {pagedIndexSubscriptions && !error && (\n                        <Pagination\n                            count={\n                                pagedIndexSubscriptions.nextPaging\n                                    ? page + 1\n                                    : page\n                            }\n                            onChange={(\n                                event: React.ChangeEvent<unknown>,\n                                value: number\n                            ) => setPage(value)}\n                        />\n                    )}\n                </>\n            }\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ListSuperTokens.tsx",["147","148"],"import React, {\n    FC,\n    ReactElement,\n    SyntheticEvent,\n    useContext,\n    useEffect,\n    useState,\n} from \"react\";\nimport {\n    ISuperToken,\n} from \"@superfluid-finance/sdk-core\";\nimport { Loader } from \"../Loader\";\nimport {\n    FormControl,\n    FormControlLabel,\n    FormGroup,\n    Pagination,\n    Radio,\n    RadioGroup,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n} from \"@mui/material\";\nimport { SignerContext } from \"../SignerContext\";\nimport { Error } from \"../Error\";\nimport { sfApi } from \"../redux/store\";\n\nconst pageSize = 10;\n\nexport const ListSuperTokens: FC = (): ReactElement => {\n    const [chainId, signerAddress] = useContext(SignerContext);\n    const [page, setPage] = useState<number>(1);\n    const [queryChainId, setQueryChainId] = useState<number>(chainId);\n    const [isListed, setIsListed] = useState<boolean | undefined>();\n\n    useEffect(() => {\n        setPage(1);\n    }, [queryChainId, isListed]);\n\n    const {\n        data: pagedSuperTokens,\n        isFetching,\n        isLoading,\n        error,\n        refetch,\n    } = sfApi.useListSuperTokensQuery({\n        isListed: isListed,\n        chainId: queryChainId,\n        skip: (page - 1) * pageSize,\n        take: pageSize,\n    });\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setIsListed((event.target as HTMLInputElement).value === \"true\");\n    };\n\n    return (\n        <>\n            <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                <FormGroup>\n                    <TextField\n                        sx={{ m: 1 }}\n                        label=\"Chain ID\"\n                        value={queryChainId}\n                        onChange={(e) =>\n                            setQueryChainId(Number(e.currentTarget.value))\n                        }\n                    />\n                    <FormControl component=\"fieldset\">\n                        <RadioGroup\n                            row\n                            name=\"row-radio-buttons-group\"\n                            value={isListed}\n                            onChange={handleChange}\n                        >\n                            <FormControlLabel\n                                value=\"true\"\n                                control={<Radio />}\n                                label=\"Listed\"\n                            />\n                            <FormControlLabel\n                                value=\"false\"\n                                control={<Radio />}\n                                label=\"Not Listed\"\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </FormGroup>\n            </form>\n            {\n                <>\n                    {isFetching ? (\n                        <Loader />\n                    ) : error ? (\n                        <Error error={error} retry={refetch} />\n                    ) : (\n                        <TableContainer>\n                            <Table aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            createdAtTimestamp\n                                        </TableCell>\n                                        <TableCell>\n                                            createdAtBlockNumber\n                                        </TableCell>\n                                        <TableCell>name</TableCell>\n                                        <TableCell>symbol</TableCell>\n                                        <TableCell>isListed</TableCell>\n                                        <TableCell>underlyingAddress</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {pagedSuperTokens!.data.map(\n                                        (superToken: ISuperToken) => (\n                                            <TableRow key={superToken.id}>\n                                                <TableCell>\n                                                    {\n                                                        superToken.createdAtTimestamp\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        superToken.createdAtBlockNumber\n                                                    }\n                                                </TableCell>\n                                                <TableCell>\n                                                    {superToken.name}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {superToken.symbol}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {superToken.isListed}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {\n                                                        superToken.underlyingAddress\n                                                    }\n                                                </TableCell>\n                                            </TableRow>\n                                        )\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    )}\n                    {pagedSuperTokens && !error && (\n                        <Pagination\n                            count={\n                                pagedSuperTokens.nextPaging ? page + 1 : page\n                            }\n                            onChange={(\n                                event: React.ChangeEvent<unknown>,\n                                value: number\n                            ) => setPage(value)}\n                        />\n                    )}\n                </>\n            }\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/CreateStream.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/UpgradeToSuperToken.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/UpdateStream.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/DowngradeFromSuperToken.tsx",["149"],"import { SignerContext } from \"../SignerContext\";\nimport { Loader } from \"../Loader\";\nimport { FC, ReactElement, SyntheticEvent, useContext, useState } from \"react\";\nimport { Button, FormGroup, TextField, Switch } from \"@mui/material\";\nimport { Error } from \"../Error\";\nimport { sfApi } from \"../redux/store\";\n\nexport const DowngradeFromSuperToken: FC = (): ReactElement => {\n    const [downgradeFromSuperToken, { isLoading, error }] =\n        sfApi.useDowngradeFromSuperTokenMutation();\n\n    const [chainId, signerAddress] = useContext(SignerContext);\n\n    const [amount, setAmount] = useState<string>(\"\");\n    const [superToken, setSuperToken] = useState<string>(\"\");\n    const [waitForConfirmation, setWaitForConfirmation] =\n        useState<boolean>(false);\n\n    const handleDowngradeFromSuperToken = (e: SyntheticEvent) => {\n        downgradeFromSuperToken({\n            chainId,\n            superTokenAddress: superToken,\n            amountWei: amount,\n            waitForConfirmation\n        });\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Loader />\n            ) : (\n                <>\n                    {error && <Error error={error} />}\n                    <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                        <FormGroup>\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"SuperToken\"\n                                onChange={(e) =>\n                                    setSuperToken(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"Amount\"\n                                onChange={(e) =>\n                                    setAmount(e.currentTarget.value)\n                                }\n                            />\n                            <Switch\n                                value={waitForConfirmation}\n                                title=\"Wait for confirmation\"\n                                onChange={() =>\n                                    setWaitForConfirmation(!waitForConfirmation)\n                                }\n                            />\n                            <Button\n                                sx={{ m: 1 }}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                fullWidth={true}\n                                onClick={handleDowngradeFromSuperToken}\n                            >\n                                Downgrade\n                            </Button>\n                        </FormGroup>\n                    </form>\n                </>\n            )}\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/DeleteStream.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/CreateIndex.tsx",["150"],"import { SignerContext } from \"../SignerContext\";\nimport { Loader } from \"../Loader\";\nimport { FC, ReactElement, SyntheticEvent, useContext, useState } from \"react\";\nimport { Button, FormGroup, Switch, TextField } from \"@mui/material\";\nimport { Error } from \"../Error\";\nimport { sfApi } from \"../redux/store\";\n\nexport const CreateIndex: FC = (): ReactElement => {\n    const [createIndex, { isLoading, error }] = sfApi.useCreateIndexMutation();\n\n    const [chainId, signerAddress] = useContext(SignerContext);\n    const [superToken, setSuperToken] = useState<string>(\"\");\n    const [indexId, setIndexId] = useState<string>(\"\");\n    const [userDataBytes, setUserDataBytes] = useState<string>(\"\");\n    const [waitForConfirmation, setWaitForConfirmation] =\n        useState<boolean>(false);\n\n    const handleOperation = (e: SyntheticEvent) => {\n        createIndex({\n            waitForConfirmation,\n            chainId,\n            superTokenAddress: superToken,\n            indexId,\n            userDataBytes,\n        });\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Loader />\n            ) : (\n                <>\n                    {error && <Error error={error} />}\n                    <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                        <FormGroup>\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"SuperToken\"\n                                onChange={(e) =>\n                                    setSuperToken(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"Index ID\"\n                                onChange={(e) =>\n                                    setIndexId(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"User Data\"\n                                onChange={(e) =>\n                                    setUserDataBytes(e.currentTarget.value)\n                                }\n                            />\n                            <Switch\n                                value={waitForConfirmation}\n                                title=\"Wait for confirmation\"\n                                onChange={() =>\n                                    setWaitForConfirmation(!waitForConfirmation)\n                                }\n                            />\n                            <Button\n                                sx={{ m: 1 }}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                fullWidth={true}\n                                onClick={handleOperation}\n                            >\n                                Create\n                            </Button>\n                        </FormGroup>\n                    </form>\n                </>\n            )}\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/DistributeToIndex.tsx",["151"],"import { SignerContext } from \"../SignerContext\";\nimport { Loader } from \"../Loader\";\nimport { FC, ReactElement, SyntheticEvent, useContext, useState } from \"react\";\nimport { Button, FormGroup, Switch, TextField } from \"@mui/material\";\nimport { Error } from \"../Error\";\nimport { sfApi } from \"../redux/store\";\n\nexport const DistributeToIndex: FC = (): ReactElement => {\n    const [distribute, { isLoading, error }] = sfApi.useDistributeToIndexMutation();\n\n    const [chainId, signerAddress] = useContext(SignerContext);\n    const [superToken, setSuperToken] = useState<string>(\"\");\n    const [indexId, setIndexId] = useState<string>(\"\");\n    const [amountWei, setAmountWei] = useState<string>(\"\");\n    const [userDataBytes, setUserDataBytes] = useState<string>(\"\");\n    const [waitForConfirmation, setWaitForConfirmation] =\n        useState<boolean>(false);\n\n    const handleOperation = (e: SyntheticEvent) => {\n        distribute({\n            waitForConfirmation,\n            chainId,\n            superTokenAddress: superToken,\n            indexId,\n            amountWei,\n            userDataBytes,\n        });\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Loader />\n            ) : (\n                <>\n                    {error && <Error error={error} />}\n                    <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                        <FormGroup>\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"SuperToken\"\n                                onChange={(e) =>\n                                    setSuperToken(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"Index ID\"\n                                onChange={(e) =>\n                                    setIndexId(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"User Data\"\n                                onChange={(e) =>\n                                    setUserDataBytes(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"Amount\"\n                                onChange={(e) =>\n                                    setAmountWei(e.currentTarget.value)\n                                }\n                            />\n                            <Switch\n                                value={waitForConfirmation}\n                                title=\"Wait for confirmation\"\n                                onChange={() =>\n                                    setWaitForConfirmation(!waitForConfirmation)\n                                }\n                            />\n                            <Button\n                                sx={{ m: 1 }}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                fullWidth={true}\n                                onClick={handleOperation}\n                            >\n                                Distribute\n                            </Button>\n                        </FormGroup>\n                    </form>\n                </>\n            )}\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ApproveIndexSubscription.tsx",["152"],"import { SignerContext } from \"../SignerContext\";\nimport { Loader } from \"../Loader\";\nimport { FC, ReactElement, SyntheticEvent, useContext, useState } from \"react\";\nimport { Button, FormGroup, Switch, TextField } from \"@mui/material\";\nimport { Error } from \"../Error\";\nimport { sfApi } from \"../redux/store\";\n\nexport const ApproveIndexSubscription: FC = (): ReactElement => {\n    const [approve, { isLoading, error }] =\n        sfApi.useApproveIndexSubscriptionMutation();\n\n    const [chainId, signerAddress] = useContext(SignerContext);\n    const [superToken, setSuperToken] = useState<string>(\"\");\n    const [publisherAddress, setPublisherAddress] = useState<string>(\"\");\n    const [indexId, setIndexId] = useState<string>(\"\");\n    const [userDataBytes, setUserDataBytes] = useState<string>(\"\");\n    const [waitForConfirmation, setWaitForConfirmation] =\n        useState<boolean>(false);\n\n    const handleOperation = (e: SyntheticEvent) => {\n        approve({\n            waitForConfirmation,\n            chainId,\n            superTokenAddress: superToken,\n            indexId,\n            userDataBytes,\n            publisherAddress,\n        });\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Loader />\n            ) : (\n                <>\n                    {error && <Error error={error} />}\n                    <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                        <FormGroup>\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"SuperToken\"\n                                onChange={(e) =>\n                                    setSuperToken(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"Publisher\"\n                                onChange={(e) =>\n                                    setPublisherAddress(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"Index ID\"\n                                onChange={(e) =>\n                                    setIndexId(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"User Data\"\n                                onChange={(e) =>\n                                    setUserDataBytes(e.currentTarget.value)\n                                }\n                            />\n                            <Switch\n                                value={waitForConfirmation}\n                                title=\"Wait for confirmation\"\n                                onChange={() =>\n                                    setWaitForConfirmation(!waitForConfirmation)\n                                }\n                            />\n                            <Button\n                                sx={{ m: 1 }}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                fullWidth={true}\n                                onClick={handleOperation}\n                            >\n                                Approve\n                            </Button>\n                        </FormGroup>\n                    </form>\n                </>\n            )}\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/ClaimFromIndexSubscription.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/UpdateIndexSubscriptionUnits.tsx",["153"],"import { SignerContext } from \"../SignerContext\";\nimport { Loader } from \"../Loader\";\nimport { FC, ReactElement, SyntheticEvent, useContext, useState } from \"react\";\nimport { Button, FormGroup, Switch, TextField } from \"@mui/material\";\nimport { Error } from \"../Error\";\nimport { sfApi } from \"../redux/store\";\n\nexport const UpdateIndexSubscriptionUnits: FC = (): ReactElement => {\n    const [update, { isLoading, error }] =\n        sfApi.useUpdateIndexSubscriptionUnitsMutation();\n\n    const [chainId, signerAddress] = useContext(SignerContext);\n    const [superToken, setSuperToken] = useState<string>(\"\");\n    const [subscriberAddress, setSubscriberAddress] = useState<string>(\"\");\n    const [indexId, setIndexId] = useState<string>(\"\");\n    const [unitsNumber, setUnitsNumber] = useState<string>(\"\");\n    const [userDataBytes, setUserDataBytes] = useState<string>(\"\");\n    const [waitForConfirmation, setWaitForConfirmation] =\n        useState<boolean>(false);\n\n    const handleOperation = (e: SyntheticEvent) => {\n        update({\n            waitForConfirmation,\n            chainId,\n            superTokenAddress: superToken,\n            indexId,\n            userDataBytes,\n            unitsNumber,\n            subscriberAddress,\n        });\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Loader />\n            ) : (\n                <>\n                    {error && <Error error={error} />}\n                    <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                        <FormGroup>\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"SuperToken\"\n                                onChange={(e) =>\n                                    setSuperToken(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"Index ID\"\n                                onChange={(e) =>\n                                    setIndexId(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"Subscriber\"\n                                onChange={(e) =>\n                                    setSubscriberAddress(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"Units\"\n                                onChange={(e) =>\n                                    setUnitsNumber(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"User Data\"\n                                onChange={(e) =>\n                                    setUserDataBytes(e.currentTarget.value)\n                                }\n                            />\n                            <Switch\n                                value={waitForConfirmation}\n                                title=\"Wait for confirmation\"\n                                onChange={() =>\n                                    setWaitForConfirmation(!waitForConfirmation)\n                                }\n                            />\n                            <Button\n                                sx={{ m: 1 }}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                fullWidth={true}\n                                onClick={handleOperation}\n                            >\n                                Update\n                            </Button>\n                        </FormGroup>\n                    </form>\n                </>\n            )}\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/DeleteIndexSubscription.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/RevokeIndexSubscription.tsx",["154"],"import { SignerContext } from \"../SignerContext\";\nimport { Loader } from \"../Loader\";\nimport { FC, ReactElement, SyntheticEvent, useContext, useState } from \"react\";\nimport { Button, FormGroup, Switch, TextField } from \"@mui/material\";\nimport { Error } from \"../Error\";\nimport { sfApi } from \"../redux/store\";\n\nexport const RevokeIndexSubscription: FC = (): ReactElement => {\n    const [trigger, { isLoading, error }] =\n        sfApi.useRevokeIndexSubscriptionMutation();\n\n    const [chainId, signerAddress] = useContext(SignerContext);\n    const [superToken, setSuperToken] = useState<string>(\"\");\n    const [publisherAddress, setPublisherAddress] = useState<string>(\"\");\n    const [indexId, setIndexId] = useState<string>(\"\");\n    const [userDataBytes, setUserDataBytes] = useState<string>(\"\");\n    const [waitForConfirmation, setWaitForConfirmation] =\n        useState<boolean>(false);\n\n    const handleOperation = (e: SyntheticEvent) => {\n        trigger({\n            waitForConfirmation,\n            chainId,\n            superTokenAddress: superToken,\n            indexId,\n            userDataBytes,\n            publisherAddress\n        });\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Loader />\n            ) : (\n                <>\n                    {error && <Error error={error} />}\n                    <form onSubmit={(e: SyntheticEvent) => e.preventDefault()}>\n                        <FormGroup>\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"SuperToken\"\n                                onChange={(e) =>\n                                    setSuperToken(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"Publisher\"\n                                onChange={(e) =>\n                                    setPublisherAddress(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"Index ID\"\n                                onChange={(e) =>\n                                    setIndexId(e.currentTarget.value)\n                                }\n                            />\n                            <TextField\n                                sx={{ m: 1 }}\n                                label=\"User Data\"\n                                onChange={(e) =>\n                                    setUserDataBytes(e.currentTarget.value)\n                                }\n                            />\n                            <Switch\n                                value={waitForConfirmation}\n                                title=\"Wait for confirmation\"\n                                onChange={() =>\n                                    setWaitForConfirmation(!waitForConfirmation)\n                                }\n                            />\n                            <Button\n                                sx={{ m: 1 }}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                fullWidth={true}\n                                onClick={handleOperation}\n                            >\n                                Revoke\n                            </Button>\n                        </FormGroup>\n                    </form>\n                </>\n            )}\n        </>\n    );\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/features/MonitorForEventsToInvalidateCache.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/Error.tsx",[],"/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/FlowingBalance.tsx",["155"],"import React, {FC, ReactElement, useEffect, useState} from \"react\";\nimport { ethers} from 'ethers';\n\nconst ANIMATION_MINIMUM_STEP_TIME = 100;\n\nexport const FlowingBalance: FC<{\n    balanceWei: string;\n    balanceTimestamp: number;\n    flowRateWei: string;\n    format?: (flowingBalanceWei: string) => string;\n}> = ({ balanceWei, balanceTimestamp, flowRateWei, format = x => x }): ReactElement => {\n    const [formattedValue, setFormattedValue] = useState(\"\");\n    useEffect(() => {\n        const balanceBigNumber = ethers.BigNumber.from(balanceWei);\n        const flowRateBigNumber = ethers.BigNumber.from(flowRateWei);\n        const balanceTimestampBigNumber = ethers.BigNumber.from(balanceTimestamp).mul(1000);\n\n        let stopAnimation = false;\n        let lastAnimationTimestamp: DOMHighResTimeStamp = 0;\n\n        const animationStep = (currentAnimationTimestamp: DOMHighResTimeStamp) => {\n            if (currentAnimationTimestamp - lastAnimationTimestamp > ANIMATION_MINIMUM_STEP_TIME) {\n                if (stopAnimation) {\n                    return;\n                }\n\n                const currentTimestampBigNumber =\n                    ethers.BigNumber.from(new Date().getTime());\n\n                setFormattedValue(format(balanceBigNumber\n                    .add(\n                        currentTimestampBigNumber\n                            .sub(balanceTimestampBigNumber)\n                            .mul(flowRateBigNumber)\n                            .div(1000)\n                    )\n                    .toString()));\n\n                lastAnimationTimestamp = currentAnimationTimestamp;\n            }\n            window.requestAnimationFrame(animationStep);\n        };\n\n        window.requestAnimationFrame(animationStep);\n\n        return () => {\n            stopAnimation = true;\n        };\n    }, [balanceTimestamp]);\n    return <span>{formattedValue}</span>;\n};\n","/home/kaspar/WebstormProjects/protocol-monorepo-2/examples/sdk-redux-react-typecript/src/redux/hooks.ts",[],{"ruleId":"156","severity":1,"message":"157","line":18,"column":25,"nodeType":"158","messageId":"159","endLine":18,"endColumn":38},{"ruleId":"156","severity":1,"message":"157","line":31,"column":21,"nodeType":"158","messageId":"159","endLine":31,"endColumn":34},{"ruleId":"156","severity":1,"message":"160","line":46,"column":9,"nodeType":"158","messageId":"159","endLine":46,"endColumn":18},{"ruleId":"156","severity":1,"message":"161","line":40,"column":9,"nodeType":"158","messageId":"159","endLine":40,"endColumn":19},{"ruleId":"156","severity":1,"message":"160","line":45,"column":9,"nodeType":"158","messageId":"159","endLine":45,"endColumn":18},{"ruleId":"156","severity":1,"message":"160","line":45,"column":9,"nodeType":"158","messageId":"159","endLine":45,"endColumn":18},{"ruleId":"156","severity":1,"message":"160","line":48,"column":9,"nodeType":"158","messageId":"159","endLine":48,"endColumn":18},{"ruleId":"156","severity":1,"message":"157","line":35,"column":21,"nodeType":"158","messageId":"159","endLine":35,"endColumn":34},{"ruleId":"156","severity":1,"message":"160","line":47,"column":9,"nodeType":"158","messageId":"159","endLine":47,"endColumn":18},{"ruleId":"156","severity":1,"message":"157","line":12,"column":21,"nodeType":"158","messageId":"159","endLine":12,"endColumn":34},{"ruleId":"156","severity":1,"message":"157","line":11,"column":21,"nodeType":"158","messageId":"159","endLine":11,"endColumn":34},{"ruleId":"156","severity":1,"message":"157","line":11,"column":21,"nodeType":"158","messageId":"159","endLine":11,"endColumn":34},{"ruleId":"156","severity":1,"message":"157","line":12,"column":21,"nodeType":"158","messageId":"159","endLine":12,"endColumn":34},{"ruleId":"156","severity":1,"message":"157","line":12,"column":21,"nodeType":"158","messageId":"159","endLine":12,"endColumn":34},{"ruleId":"156","severity":1,"message":"157","line":12,"column":21,"nodeType":"158","messageId":"159","endLine":12,"endColumn":34},{"ruleId":"162","severity":1,"message":"163","line":49,"column":8,"nodeType":"164","endLine":49,"endColumn":26,"suggestions":"165"},"@typescript-eslint/no-unused-vars","'signerAddress' is assigned a value but never used.","Identifier","unusedVar","'isLoading' is assigned a value but never used.","'isFetching' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'balanceWei', 'flowRateWei', and 'format'. Either include them or remove the dependency array. If 'format' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["166"],{"desc":"167","fix":"168"},"Update the dependencies array to be: [balanceTimestamp, balanceWei, flowRateWei, format]",{"range":"169","text":"170"},[1817,1835],"[balanceTimestamp, balanceWei, flowRateWei, format]"]