// SPDX-License-Identifier: AGPLv3
pragma solidity ^0.8.0;

import { Vm } from "forge-std/Vm.sol";
import { IERC1820Registry } from "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol";
import { Resolver } from "@superfluid-finance/ethereum-contracts/contracts/utils/Resolver.sol";
import { TestGovernance } from "@superfluid-finance/ethereum-contracts/contracts/utils/TestGovernance.sol";
import { SuperfluidLoader } from "@superfluid-finance/ethereum-contracts/contracts/utils/SuperfluidLoader.sol";
import { Superfluid } from "@superfluid-finance/ethereum-contracts/contracts/superfluid/Superfluid.sol";
import { UUPSProxy } from "@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxy.sol";
import { ConstantFlowAgreementV1 } from "@superfluid-finance/ethereum-contracts/contracts/agreements/ConstantFlowAgreementV1.sol";
import { InstantDistributionAgreementV1 } from "@superfluid-finance/ethereum-contracts/contracts/agreements/InstantDistributionAgreementV1.sol";
import { SuperTokenFactoryHelper, SuperTokenFactory } from "@superfluid-finance/ethereum-contracts/contracts/superfluid/SuperTokenFactory.sol";

/// @title Superfluid Framework
/// @author jtriley.eth
/// @notice This is NOT for deploying public nets, but rather only for tesing envs
contract SuperfluidFramework {
    /// @dev Deterministic ERC1820Regsitry address
    IERC1820Registry internal erc1820Registry =
        IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);

    /// @dev Look at all those contracts. These are used for framework deployment.
    Resolver internal resolver;
    TestGovernance internal governance;
    SuperfluidLoader internal superfluidLoader;
    Superfluid internal host;
    ConstantFlowAgreementV1 internal cfa;
    InstantDistributionAgreementV1 internal ida;
    SuperTokenFactoryHelper internal superTokenFactoryHelper;
    SuperTokenFactory internal superTokenFactory;

    /// @notice Deploys everything... probably
    /// @param vm Virtual Machine for cheat codes
    /// @param admin Desired address of Admin
    constructor(Vm vm, address admin) {
        // everything will be deployed as if `admin` was the message sender of each
        vm.startPrank(admin);

        // STEP 1
        // Deploy ERC1820Registry by 'etching' the bytecode into the address
        // mother of god this can not be real
        vm.etch(
            address(erc1820Registry),
            bytes(
                hex"608060405234801561001057600080fd5b50600436106100a5576000357c010000000000000000000000000000000000000000000000000000000090048063a41e7d5111610078578063a41e7d51146101d4578063aabbb8ca1461020a578063b705676514610236578063f712f3e814610280576100a5565b806329965a1d146100aa5780633d584063146100e25780635df8122f1461012457806365ba36c114610152575b600080fd5b6100e0600480360360608110156100c057600080fd5b50600160a060020a038135811691602081013591604090910135166102b6565b005b610108600480360360208110156100f857600080fd5b5035600160a060020a0316610570565b60408051600160a060020a039092168252519081900360200190f35b6100e06004803603604081101561013a57600080fd5b50600160a060020a03813581169160200135166105bc565b6101c26004803603602081101561016857600080fd5b81019060208101813564010000000081111561018357600080fd5b82018360208201111561019557600080fd5b803590602001918460018302840111640100000000831117156101b757600080fd5b5090925090506106b3565b60408051918252519081900360200190f35b6100e0600480360360408110156101ea57600080fd5b508035600160a060020a03169060200135600160e060020a0319166106ee565b6101086004803603604081101561022057600080fd5b50600160a060020a038135169060200135610778565b61026c6004803603604081101561024c57600080fd5b508035600160a060020a03169060200135600160e060020a0319166107ef565b604080519115158252519081900360200190f35b61026c6004803603604081101561029657600080fd5b508035600160a060020a03169060200135600160e060020a0319166108aa565b6000600160a060020a038416156102cd57836102cf565b335b9050336102db82610570565b600160a060020a031614610339576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b6103428361092a565b15610397576040805160e560020a62461bcd02815260206004820152601a60248201527f4d757374206e6f7420626520616e204552433136352068617368000000000000604482015290519081900360640190fd5b600160a060020a038216158015906103b85750600160a060020a0382163314155b156104ff5760405160200180807f455243313832305f4143434550545f4d4147494300000000000000000000000081525060140190506040516020818303038152906040528051906020012082600160a060020a031663249cb3fa85846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600160a060020a0316600160a060020a031681526020019250505060206040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d60208110156104a857600080fd5b5051146104ff576040805160e560020a62461bcd02815260206004820181905260248201527f446f6573206e6f7420696d706c656d656e742074686520696e74657266616365604482015290519081900360640190fd5b600160a060020a03818116600081815260208181526040808320888452909152808220805473ffffffffffffffffffffffffffffffffffffffff19169487169485179055518692917f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a450505050565b600160a060020a03818116600090815260016020526040812054909116151561059a5750806105b7565b50600160a060020a03808216600090815260016020526040902054165b919050565b336105c683610570565b600160a060020a031614610624576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b81600160a060020a031681600160a060020a0316146106435780610646565b60005b600160a060020a03838116600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169585169590951790945592519184169290917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a43509190a35050565b600082826040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090505b92915050565b6106f882826107ef565b610703576000610705565b815b600160a060020a03928316600081815260208181526040808320600160e060020a031996909616808452958252808320805473ffffffffffffffffffffffffffffffffffffffff19169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b600080600160a060020a038416156107905783610792565b335b905061079d8361092a565b156107c357826107ad82826108aa565b6107b85760006107ba565b815b925050506106e8565b600160a060020a0390811660009081526020818152604080832086845290915290205416905092915050565b6000808061081d857f01ffc9a70000000000000000000000000000000000000000000000000000000061094c565b909250905081158061082d575080155b1561083d576000925050506106e8565b61084f85600160e060020a031961094c565b909250905081158061086057508015155b15610870576000925050506106e8565b61087a858561094c565b909250905060018214801561088f5750806001145b1561089f576001925050506106e8565b506000949350505050565b600160a060020a0382166000908152600260209081526040808320600160e060020a03198516845290915281205460ff1615156108f2576108eb83836107ef565b90506106e8565b50600160a060020a03808316600081815260208181526040808320600160e060020a0319871684529091529020549091161492915050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161590565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000008082526004820183905260009182919060208160248189617530fa90519096909550935050505056fea165627a7a72305820377f4a2d4301ede9949f163f319021a6e9c687c292a5e2b2c4734c126b524e6c0029"
            )
        );

        // STEP 2
        // Deploy Superfluid Resolver
        resolver = new Resolver();

        // STEP 3
        // Deploy TestGovernance. Needs initialization later.
        governance = new TestGovernance();

        // STEP 4
        // Register Governance with Resolver
        resolver.set("TestGovernance.test", address(governance));

        // STEP 5
        // Deploy Superfluid Loader
        superfluidLoader = new SuperfluidLoader(resolver);

        // STEP 6
        // Register SuperfluidLoader with Resolver
        resolver.set("SuperfluidLoader-v1", address(superfluidLoader));

        // STEP 7
        // Deploy Superfluid
        host = new Superfluid(true, false);

        // STEP 8
        // Initialize Superfluid with Governance address
        host.initialize(governance);

        // STEP 9
        // Register Superfluid with Resolver
        resolver.set("Superfluid.test", address(host));

        // STEP 10
        // Initialize Governance
        address[] memory trustedForwarders = new address[](0);
        governance.initialize(
            host,
            address(69),
            4 hours,
            30 minutes,
            trustedForwarders
        );

        // STEP 11
        // Deploy ConstantFlowAgreementV1
        cfa = new ConstantFlowAgreementV1(host);

        // STEP 12
        // Register ConstantFlowAgreementV1 TestGovernance
        governance.registerAgreementClass(host, address(cfa));

        // STEP 13
        // Deploy SlotsBitmapLibrary by 'etching' the bytecode to the address
        // why have you forsaken me, foundry devs
        vm.etch(
            address(0x0101010101010101010101010101010101010101),
            bytes(
                hex"730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806306967a8c14610050578063a324701014610125578063a9472bf81461018d575b600080fd5b61008c6004803603608081101561006657600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356101df565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156100d05781810151838201526020016100b8565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561010f5781810151838201526020016100f7565b5050505090500194505050505060405180910390f35b81801561013157600080fd5b50610174600480360360a081101561014857600080fd5b506001600160a01b0381358116916020810135909116906040810135906060810135906080013561052c565b6040805163ffffffff9092168252519081900360200190f35b81801561019957600080fd5b506101dd600480360360808110156101b057600080fd5b5080356001600160a01b03908116916020810135909116906040810135906060013563ffffffff16610886565b005b60408051634b61cc3360e01b81523060048201526001600160a01b03858116602483015260448201859052600160648301529151606092839260009291891691634b61cc33916084808201928692909190829003018186803b15801561024457600080fd5b505afa158015610258573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561028157600080fd5b8101908080516040519392919084600160201b8211156102a057600080fd5b9083019060208201858111156102b557600080fd5b82518660208202830111600160201b821117156102d157600080fd5b82525081516020918201928201910280838360005b838110156102fe5781810151838201526020016102e6565b5050505090500160405250505060008151811061031757fe5b60209081029190910101516040805161010080825261202082019092529192508160200160208202803683375050604080516101008082526120208201909252929550905060208201612000803683370190505091506000805b61010063ffffffff8216101561051a57600163ffffffff821684901c1661039757610512565b808583815181106103a457fe5b63ffffffff928316602091820292909201015260408051634b61cc3360e01b81523060048201526001600160a01b038b8116602483015292841689016044820152600160648201529051918b1691634b61cc3391608480820192600092909190829003018186803b15801561041857600080fd5b505afa15801561042c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561045557600080fd5b8101908080516040519392919084600160201b82111561047457600080fd5b90830190602082018581111561048957600080fd5b82518660208202830111600160201b821117156104a557600080fd5b82525081516020918201928201910280838360005b838110156104d25781810151838201526020016104ba565b505050509050016040525050506000815181106104eb57fe5b60200260200101518483815181106104ff57fe5b6020026020010181815250508160010191505b600101610371565b50808452808352505094509492505050565b60408051634b61cc3360e01b81523060048201526001600160a01b03868116602483015260448201869052600160648301529151600092839290891691634b61cc33916084808201928692909190829003018186803b15801561058e57600080fd5b505afa1580156105a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156105cb57600080fd5b8101908080516040519392919084600160201b8211156105ea57600080fd5b9083019060208201858111156105ff57600080fd5b82518660208202830111600160201b8211171561061b57600080fd5b82525081516020918201928201910280838360005b83811015610648578181015183820152602001610630565b5050505090500160405250505060008151811061066157fe5b602002602001015160001c9050600091505b61010063ffffffff8316101561087c57600163ffffffff831682901c16610871576040805160018082528183019092526000916020808301908036833701905050905083816000815181106106c457fe5b602002602001018181525050876001600160a01b031663090c415e888563ffffffff168801846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561074e578181015183820152602001610736565b50505050905001945050505050600060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b505050508263ffffffff166001901b821760001b816000815181106107aa57fe5b602002602001018181525050876001600160a01b031663090c415e8888846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561082c578181015183820152602001610814565b50505050905001945050505050600060405180830381600087803b15801561085357600080fd5b505af1158015610867573d6000803e3d6000fd5b505050505061087c565b816001019150610673565b5095945050505050565b60408051634b61cc3360e01b81523060048201526001600160a01b03858116602483015260448201859052600160648301529151600092871691634b61cc339160848083019286929190829003018186803b1580156108e457600080fd5b505afa1580156108f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561092157600080fd5b8101908080516040519392919084600160201b82111561094057600080fd5b90830190602082018581111561095557600080fd5b82518660208202830111600160201b8211171561097157600080fd5b82525081516020918201928201910280838360005b8381101561099e578181015183820152602001610986565b505050509050016040525050506000815181106109b757fe5b60209081029190910181015160408051600180825281830190925291935060009282810190803683370190505090508263ffffffff166001901b19821660001b81600081518110610a0457fe5b602002602001018181525050856001600160a01b031663090c415e8686846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610a86578181015183820152602001610a6e565b50505050905001945050505050600060405180830381600087803b158015610aad57600080fd5b505af1158015610ac1573d6000803e3d6000fd5b5050505050505050505056fea2646970667358221220f40193134197e6a863a1b407fe7a904a840daf5df89f5878849928b0c3d7672664736f6c63430007060033"
            )
        );

        // NOTE: This causes forge test to just build and not test and seems to silently fail
        // STEP 14
        // Deploy InstantDistributionAgreementV1
        // ida = new InstantDistributionAgreementV1(host);

        // STEP 15
        // Register InstantDistributionAgreementV1 with Governance
        // governance.registerAgreementClass(host, address(ida));

        // STEP 16
        // Deploy SuperTokenFactoryHelper
        superTokenFactoryHelper = new SuperTokenFactoryHelper();

        // STEP 17
        // Deploy SuperTokenFactory
        superTokenFactory = new SuperTokenFactory(
            host,
            superTokenFactoryHelper
        );

        // STEP 18
        // 'Update' code with Governance and register SuperTokenFactory with Superfluid
        governance.updateContracts(
            host,
            address(0),
            new address[](0),
            address(superTokenFactory)
        );
        vm.stopPrank();
    }

    /// @notice Fetches the framework contracts
    function framework()
        public
        view
        returns (
            Superfluid,
            ConstantFlowAgreementV1,
            InstantDistributionAgreementV1,
            SuperTokenFactory
        )
    {
        return (host, cfa, ida, superTokenFactory);
    }
}
