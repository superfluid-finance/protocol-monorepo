const {getScriptRunnerFactory: S, hasCode} = require("./libs/common");
const {toBN} = require("@decentral.ee/web3-helpers");

/**
 * @dev Deploy the registry contract to a default address
 * The script pre-funds a deployer address, deploys and
 * sets an initial admin.
 *
 * If default deployment doesn't work, you can deploy from a truffle console with:
 * > Registry.new()
 *
 * Usage: npx truffle exec scripts/deploy-registry.js
 */
module.exports = eval(`(${S.toString()})({skipArgv: true})`)(async function (
    args,
    options = {}
) {
    web3 = web3 || options.web3;

    const deployerAddr = "0x50d89f1b97d9b8bc858fbb50a3d2ae40aa2ad926";
    const defaultAddr = "0x63261FCB88A4ff4c04b672fCBc311D4F0f48B21D";
    const MIN_DEPLOYER_BALANCE = web3.utils.toWei("0.1");

    /*
    // construction of deploy tx:
    registryBin = require("../artifacts/Registry.json").bin;
    // HF "homestead" causes construction of a non-EIP-155 tx. The chain arg is required, but has no effect here.
    deployTx = {from: "0x50d89f1b97d9b8bc858fbb50a3d2ae40aa2ad926", gasPrice: 100e9, gas: 800000, nonce: 0,
        data: registryBin, chain: "mainnet", hardfork: "homestead"}
    signedDeployTx = web3.eth.accounts.signTransaction(deployTx, pk)
    */

    // eslint-disable-next-line
    const signedDeployTx = "0xf90ad28085174876e800830c35008080b90a7f608060405234801561001057600080fd5b5061001c600033610021565b610126565b61002b828261002f565b5050565b6000828152602081815260409091206100519183906105a86100a2821b17901c565b1561002b5761005e6100c0565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006100b7836001600160a01b0384166100c4565b90505b92915050565b3390565b60006100d0838361010e565b610106575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556100ba565b5060006100ba565b60009081526001919091016020526040902054151590565b61094a806101356000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806391d148541161006657806391d14854146101db578063a217fddf1461021b578063a815ff1514610223578063ca15c8731461029c578063d547741f146102b95761009e565b8063248a9ca3146100a35780632f2ff15d146100d257806336568abe14610100578063693ec85e1461012c5780639010d07c146101b8575b600080fd5b6100c0600480360360208110156100b957600080fd5b50356102e5565b60408051918252519081900360200190f35b6100fe600480360360408110156100e857600080fd5b50803590602001356001600160a01b03166102fa565b005b6100fe6004803603604081101561011657600080fd5b50803590602001356001600160a01b0316610366565b61019c6004803603602081101561014257600080fd5b81019060208101813564010000000081111561015d57600080fd5b82018360208201111561016f57600080fd5b8035906020019184600183028401116401000000008311171561019157600080fd5b5090925090506103c7565b604080516001600160a01b039092168252519081900360200190f35b61019c600480360360408110156101ce57600080fd5b5080359060200135610402565b610207600480360360408110156101f157600080fd5b50803590602001356001600160a01b0316610421565b604080519115158252519081900360200190f35b6100c0610439565b6100fe6004803603604081101561023957600080fd5b81019060208101813564010000000081111561025457600080fd5b82018360208201111561026657600080fd5b8035906020019184600183028401116401000000008311171561028857600080fd5b9193509150356001600160a01b031661043e565b6100c0600480360360208110156102b257600080fd5b5035610538565b6100fe600480360360408110156102cf57600080fd5b50803590602001356001600160a01b031661054f565b60009081526020819052604090206002015490565b60008281526020819052604090206002015461031d906103186105bd565b610421565b6103585760405162461bcd60e51b815260040180806020018281038252602f815260200180610887602f913960400191505060405180910390fd5b61036282826105c1565b5050565b61036e6105bd565b6001600160a01b0316816001600160a01b0316146103bd5760405162461bcd60e51b815260040180806020018281038252602f8152602001806108e6602f913960400191505060405180910390fd5b610362828261062a565b6000600183836040518083838082843791909101948552505060405192839003602001909220546001600160a01b0316925050505b92915050565b600082815260208190526040812061041a9083610693565b9392505050565b600082815260208190526040812061041a908361069f565b600081565b61044b60006103186105bd565b610495576040805162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1030b71030b236b4b760511b604482015290519081900360640190fd5b80600184846040518083838082843791909101948552505060405192839003602001832080546001600160a01b03959095166001600160a01b03199095169490941790935550849150839080838380828437604080519390910183900383206001600160a01b038816845290519095507f496595ced95720268cf8bc60bae3f35024ff2a130f73ac4e20f5c1eaca35db99945091829003602001925050a2505050565b60008181526020819052604081206103fc906106b4565b60008281526020819052604090206002015461056d906103186105bd565b6103bd5760405162461bcd60e51b81526004018080602001828103825260308152602001806108b66030913960400191505060405180910390fd5b600061041a836001600160a01b0384166106bf565b3390565b60008281526020819052604090206105d990826105a8565b15610362576105e66105bd565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206106429082610709565b156103625761064f6105bd565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061041a838361071e565b600061041a836001600160a01b038416610782565b60006103fc8261079a565b60006106cb8383610782565b610701575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103fc565b5060006103fc565b600061041a836001600160a01b03841661079e565b815460009082106107605760405162461bcd60e51b81526004018080602001828103825260228152602001806108656022913960400191505060405180910390fd5b82600001828154811061076f57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000818152600183016020526040812054801561085a57835460001980830191908101906000908790839081106107d157fe5b90600052602060002001549050808760000184815481106107ee57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061081e57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506103fc565b60009150506103fc56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220d9aea342310863e1ff0bcad4ab0261ce98ae5307becf6f789c1bc4e5a51fe46264736f6c634300070600331ca019b77cb5b6cf1c80baaf5a1d0409dde4b60c7653ace08c64737001d500e7ce51a03fe3edaca26fb200de4b81ef9f10bfd2af3bbd1fca8e25dd8c78389aa4998766";

    console.log(`checking deployment at default address ${defaultAddr}`);
    if (!(await hasCode(web3, defaultAddr))) {
        console.log("checking balance of deployer account...");
        const deployerBal = await web3.eth.getBalance(deployerAddr);
        console.log(`deployerBal: ${deployerBal}`);
        if (!toBN(deployerBal).gte(toBN(MIN_DEPLOYER_BALANCE))) {
            console.log(
                `funding deployer account ${deployerAddr} with 0.1 ETH ...`
            );
            const account = options.from || (await web3.eth.getAccounts())[0];
            await web3.eth.sendTransaction({
                from: account,
                to: deployerAddr,
                value: web3.utils.toWei("0.1"),
            });
        }

        console.log("sending the signed deploy tx...");
        await web3.eth.sendSignedTransaction(signedDeployTx);

        if (!(await hasCode(web3, defaultAddr))) {
            throw new Error(
                `no code at expected address ${defaultAddr} after deployment`
            );
        }

        console.log(`Registry deployed at default address ${defaultAddr}`);

        /*
        // construction of grant tx:
        initialAdminAddr = "0xd15d5d0f5b1b56a4daef75cfe108cb825e97d015"
        encodedGrantRoleCall = resolver.methods.grantRole.encodeABI(
            "0x0000000000000000000000000000000000000000000000000000000000000000", initialAdminAddr)
        // "0x2f2ff15d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 \
        d15d5d0f5b1b56a4daef75cfe108cb825e97d015"
        grantTx = {from: "0x50d89f1b97d9b8bc858fbb50a3d2ae40aa2ad926", to: "0x63261FCB88A4ff4c04b672fCBc311D4F0f48B21D",
            gasPrice: 100e9, gas: 100000, nonce: 1, data: encodedGrantRoleCall, chain: "ropsten", hardfork: "homestead"}
        signedGrantTx = web3.eth.accounts.signTransaction(grantTx, pk)
        */

        // eslint-disable-next-line
        const signedGrantTx = "0xf8aa0185174876e800830186a09463261fcb88a4ff4c04b672fcbc311d4f0f48b21d80b8442f2ff15d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d15d5d0f5b1b56a4daef75cfe108cb825e97d0151ba00d1025f338f0be6cfdb3caab8d44c41b4436f89132cf61fd62d489b3883ad8b0a052e26ba445ccfea0a9ad5acc1a40db82269400babeac4b996a033c5fbad34bef";

        console.log(
            "setting initial admin account 0xd15d5d0f5b1b56a4daef75cfe108cb825e97d015 ..."
        );
        await web3.eth.sendSignedTransaction(signedGrantTx);
        console.log("admin role granted!");
    } else {
        console.log(
            `Registry already deployed at its default address ${defaultAddr}`
        );
    }
});
