##################
# Event Entities #
##################
"""
Event: An interface which is shared by all
event entities and contains basic transaction
data.
"""
interface Event {
    id: ID!
    blockNumber: BigInt!
    timestamp: BigInt!
    transactionHash: Bytes!
}

#     ConstantFlowAgreementV1    #
"""
FlowUpdated: An `Event` entity that is emitted
when a flow is created, updated, or deleted.
"""
type FlowUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!

    """
    The address of the `token` being streamed.
    """
    token: Bytes!
    sender: Bytes!
    receiver: Bytes!

    """
    The flow rate per second.
    """
    flowRate: BigInt!
    totalSenderFlowRate: BigInt!
    totalReceiverFlowRate: BigInt!
    userData: Bytes!

    # Custom Properties (not on event)

    """
    The previous flow rate.
    """
    oldFlowRate: BigInt!
    """
    The "type" of the `FlowUpdated` event.
    0 = create
    1 = update
    2 = terminate
    """
    type: Int!

    """
    The total amount streamed until the timestamp
    for the Stream entity linked to this event.
    """
    totalAmountStreamedUntilTimestamp: BigInt!

    # ---------------------------------- links ----------------------------------
    """
    The stream entity which is being modified.
    """
    stream: Stream!
}

#  InstantDistributionAgreementV1 #
type IndexCreatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    index: Index!
}

type IndexUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    oldIndexValue: BigInt!
    newIndexValue: BigInt!
    totalUnitsPending: BigInt!
    totalUnitsApproved: BigInt!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    index: Index!
}

type IndexSubscribedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    subscriber: Bytes!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    index: Index!
}

type IndexUnitsUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    subscriber: Bytes!
    units: BigInt!
    userData: Bytes!

    # Custom Properties (not on event)
    oldUnits: BigInt!

    # ---------------------------------- links ----------------------------------
    index: Index!
}

type IndexUnsubscribedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    subscriber: Bytes!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    index: Index!
}

type SubscriptionApprovedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    subscriber: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    subscription: IndexSubscription!
}

type SubscriptionRevokedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    subscriber: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    subscription: IndexSubscription!
}

type SubscriptionUnitsUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    subscriber: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    units: BigInt!
    userData: Bytes!

    # Custom Properties (not on event)
    oldUnits: BigInt!

    # ---------------------------------- links ----------------------------------
    subscription: IndexSubscription!
}

#     Host    #

type AgreementClassRegisteredEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    agreementType: Bytes!
    code: Bytes!
}

type AgreementClassUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    agreementType: Bytes!
    code: Bytes!
}

type AppRegisteredEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    app: Bytes!
}

type GovernanceReplacedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    oldGovernance: Bytes!
    newGovernance: Bytes!
}

type JailEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    app: Bytes!
    reason: BigInt!
}

type SuperTokenFactoryUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    newFactory: Bytes!
}

type SuperTokenLogicUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    code: Bytes!
}

#     Resolver    #
type RoleAdminChangedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    role: Bytes!
    previousAdminRole: Bytes!
    newAdminRole: Bytes!
}

type RoleGrantedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    role: Bytes!
    account: Bytes!
    sender: Bytes!
}

type RoleRevokedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    role: Bytes!
    account: Bytes!
    sender: Bytes!
}

#     SuperfluidGovernance    #
type CFAv1LiquidationPeriodChangedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    host: Bytes!
    superToken: Bytes!
    isSet: Boolean! # changed from Set due to strange bug w/ TheGraph
    liquidationPeriod: BigInt!
}

type ConfigChangedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    host: Bytes!
    superToken: Bytes!
    key: Bytes!
    isSet: Boolean! # changed from Set due to strange bug w/ TheGraph
    value: BigInt!
}

type RewardAddressChangedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    host: Bytes!
    superToken: Bytes!
    isSet: Boolean! # changed from Set due to strange bug w/ TheGraph
    rewardAddress: Bytes!
}

type TrustedForwarderChangedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    host: Bytes!
    superToken: Bytes!
    isSet: Boolean! # changed from Set due to strange bug w/ TheGraph
    forwarder: Bytes!
    enabled: Boolean!
}

#     SuperToken    #
type AgreementLiquidatedByEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    liquidatorAccount: Bytes!
    agreementClass: Bytes!
    agreementId: Bytes!
    penaltyAccount: Bytes!
    bondAccount: Bytes!
    rewardAmount: BigInt!
    bailoutAmount: BigInt!
}

type BurnedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    operator: Bytes!
    from: Bytes!
    amount: BigInt!
    data: Bytes!
    operatorData: Bytes!
}

type MintedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    operator: Bytes!
    to: Bytes!
    amount: BigInt!
    data: Bytes!
    operatorData: Bytes!
}

type SentEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    operator: Bytes!
    to: Bytes!
    amount: BigInt!
    data: Bytes!
    operatorData: Bytes!
}

type TransferEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    from: Account!
    to: Account!
    value: BigInt!
    token: Bytes!
}

type TokenDowngradedEvent implements Event @entity {
    id: ID!
    account: Account!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    amount: BigInt!
}

type TokenUpgradedEvent implements Event @entity {
    id: ID!
    account: Account!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    amount: BigInt!
}

#     SuperTokenFactory    #

type CustomSuperTokenCreatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
}

type SuperTokenCreatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
}

type SuperTokenLogicCreatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    tokenLogic: Bytes!
}

####################
#   HOL Entities   #
####################
# State is defined as properties that will change outside
# of the BaseEntity properties.
# Links is defined as a property which links the current
# entity to another HOL entity.

"""
Account: A HOL entity created for any addresses which interact with
Superfluid contracts.
"""
type Account @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!

    """
    Indicates whether the address/account is a super app.
    """
    isSuperApp: Boolean!

    # ---------------------------------- links ----------------------------------
    inflows: [Stream!]! @derivedFrom(field: "receiver")
    outflows: [Stream!]! @derivedFrom(field: "sender")

    sentTransferEvents: [TransferEvent!]! @derivedFrom(field: "from")
    receivedTransferEvents: [TransferEvent!]! @derivedFrom(field: "to")

    tokenUpgradedEvents: [TokenUpgradedEvent!]! @derivedFrom(field: "account")
    tokenDowngradedEvents: [TokenDowngradedEvent!]!
        @derivedFrom(field: "account")

    accountTokenSnapshots: [AccountTokenSnapshot!]!
        @derivedFrom(field: "account")
}

"""
Index: A Index HOL entity.
"""
type Index @entity {
    """
    ID composed of: publisherAddress-tokenAddress-indexId
    """
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!

    """
    indexId is not the id of the `Index` entity.
    """
    indexId: BigInt!
    # ---------------------------------- state ----------------------------------

    indexValue: BigInt!

    """
    The number of subscriptions which have units allocated to them on the `Index`.
    """
    totalSubscriptionsWithUnits: Int!

    """
    The number of units allocated by the `Index` that are pending.
    """
    totalUnitsPending: BigInt!

    """
    The number of units allocated by the `Index` that are approved.
    """
    totalUnitsApproved: BigInt!

    """
    The sum of `totalUnitsPending` and `totalUnitsApproved`.
    """
    totalUnits: BigInt!

    """
    The total amount distributed from this `Index`.
    """
    totalAmountDistributedUntilUpdatedAt: BigInt!

    # ---------------------------------- links ----------------------------------
    token: Token!
    publisher: Account!

    """
    The subscriptions of the index, it will include approved, unapproved
    and deleted subscriptions.
    """
    subscriptions: [IndexSubscription!]! @derivedFrom(field: "index")

    """
    IndexCreated event, there will only be one.
    """
    indexCreatedEvent: IndexCreatedEvent!

    indexUpdatedEvents: [IndexUpdatedEvent!]! @derivedFrom(field: "index")
    indexSubscribedEvents: [IndexSubscribedEvent!]! @derivedFrom(field: "index")
    indexUnitsUpdatedEvents: [IndexUnitsUpdatedEvent!]!
        @derivedFrom(field: "index")
    indexUnsubscribedEvents: [IndexUnsubscribedEvent!]!
        @derivedFrom(field: "index")
}

"""
IndexSubscription: A HOL entity that contains subscription data for a `subscriber` account of a particular
`Index`.
"""
type IndexSubscription @entity {
    """
    ID composed of: subscriberAddress-publisherAddress-tokenAddress-IndexId
    """
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!
    subscriber: Account!

    # ---------------------------------- state ----------------------------------
    """
    Approved subscriptions don't require subscribers to claim tokens that are distributed from
    the publisher.
    """
    approved: Boolean!

    """
    If units is 0, it indicates that the subscription is "deleted". They are no longer
    subscribed to the index.
    """
    units: BigInt!

    """
    The total amount of tokens you've received via IDA until
    `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountReceivedUntilUpdatedAt: BigInt!

    """
    The previous index value - used to calculate `totalAmountReceivedUntilUpdatedAt` field as of the
    `index.updatedAtTimestamp`. The formula to get this value is:
    `IndexSubscription.totalAmountReceivedUntilUpdatedAt + ((index.newIndexValue - indexSubscription.indexValueUntilUpdatedAt) * indexSubscription.units)`.
    """
    indexValueUntilUpdatedAt: BigInt!
    # ---------------------------------- links ----------------------------------
    index: Index!

    """
    IndexSubscription approved events on the subscription.
    """
    subscriptionApprovedEvents: [SubscriptionApprovedEvent!]!
        @derivedFrom(field: "subscription")

    subscriptionRevokedEvents: [SubscriptionRevokedEvent!]!
        @derivedFrom(field: "subscription")

    subscriptionUnitsUpdatedEvents: [SubscriptionUnitsUpdatedEvent!]!
        @derivedFrom(field: "subscription")
}

"""
Stream: A HOL entity that represents the lifetime of a stream between a `sender` and a `receiver`.
A account can start a stream, update the flow rate, but when they close it, it is
considered "dead". The next stream you create with the same `sender` and `receiver`
will create a new stream entity. Therefore, multiple stream entities can be created
between the same `sender` and `receiver`.
"""
type Stream @entity {
    """
    ID composed of: senderAddress-receiverAddress-tokenAddress-revisionIndex
    """
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!
    # ---------------------------------- state ----------------------------------
    currentFlowRate: BigInt!

    """
    The amount streamed until `updatedAtTimestamp`/`updatedAtBlock`. The formula to get the current streamed
    amount is:
    `streamedUntilUpdatedAt + ((currentTime in seconds) - updatedAtTimestamp) * currentFlowRate`.
    """
    streamedUntilUpdatedAt: BigInt!
    # ---------------------------------- links ----------------------------------
    token: Token!
    sender: Account!
    receiver: Account!

    flowUpdatedEvents: [FlowUpdatedEvent!]! @derivedFrom(field: "stream")
}

####################
#  Helper Entities #
####################
type StreamRevision @entity {
    id: ID!
    revisionIndex: Int!
}

"""
Token: A HOL entity created for super tokens that are "valid" (tokens that have
Superfluid's host contract address set as the host).
"""
type Token @entity {
    # Note: All Tokens are Super Tokens for this subgraph
    """
    ID: the token address
    """
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    name: String!
    symbol: String!
    isSuperToken: Boolean!

    """
    This indicates whether the token is a part of our resolver list.
    """
    isListed: Boolean!

    """
    The address of the underlying ERC20 token.
    """
    underlyingAddress: Bytes! # Underlying ERC20
}

####################
#  Aggr. Entities  #
####################
"""
AccountTokenSnapshot: An aggregate entity which aggregates data on an account's
interaction with a `token`.
"""
type AccountTokenSnapshot @entity {
    """
    ID composed of: accountID-tokenID
    """
    id: ID!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!
    # ---------------------------------- state ----------------------------------
    """
    The number of currently open streams.
    """
    totalNumberOfActiveStreams: Int!

    """
    The number of all-time closed streams.
    """
    totalNumberOfClosedStreams: Int!

    """
    The number of subscriptions with units allocated to them tied to this `account`.
    """
    totalSubscriptionsWithUnits: Int!

    """
    Counts all approved subscriptions whether or not they have units.
    """
    totalApprovedSubscriptions: Int!

    """
    Balance of `account` as of `updatedAtTimestamp`/`updatedAtBlock`.
    """
    balanceUntilUpdatedAt: BigInt!

    """
    The total net flow rate of the `account` as of `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalNetFlowRate: BigInt!

    """
    The total inflow rate (receive flowRate per second) of the `account`.
    """
    totalInflowRate: BigInt!

    """
    The total outflow rate (send flowrate per second) of the `account`.
    """
    totalOutflowRate: BigInt!

    """
    The total amount of `token` streamed to this `account` until
    the `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountStreamedUntilUpdatedAt: BigInt!

    """
    The total amount of `token` this `account` has transferred.
    """
    totalAmountTransferredUntilUpdatedAt: BigInt!
    # ---------------------------------- links ----------------------------------
    account: Account!
    token: Token!
}

"""
TokenStatistic: An aggregate entity which aggregates data of a single `token`.
"""
type TokenStatistic @entity {
    """
    ID: tokenID
    """
    id: ID!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!
    # ---------------------------------- state ----------------------------------
    """
    The total number of currently active `token` streams.
    """
    totalNumberOfActiveStreams: Int!

    """
    The all-time number of closed streams.
    """
    totalNumberOfClosedStreams: Int!

    """
    The total number of Indexes created with `token`.
    """
    totalNumberOfIndexes: Int!

    """
    The total number of "active" (has greater than 0 units and has distributed it at
    least once) Indexes created with `token`.
    """
    totalNumberOfActiveIndexes: Int!

    """
    The number of subscriptions which have units allocated to them
    created with Indexes that distribute `token`.
    """
    totalSubscriptionsWithUnits: Int!

    """
    Counts all approved subscriptions whether or not they have units.
    """
    totalApprovedSubscriptions: Int!

    """
    The total outflow rate of the `token` (how much value is being moved).
    """
    totalOutflowRate: BigInt!

    """
    The all-time total amount streamed until the `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountStreamedUntilUpdatedAt: BigInt!

    """
    The all-time total amount transferred until the `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountTransferredUntilUpdatedAt: BigInt!

    """
    The all-time total amount distributed until the `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountDistributedUntilUpdatedAt: BigInt!

    """
    The total supply of the token - this is impacted by users upgrading/downgrading their
    tokens.
    """
    totalSupply: BigInt!

    # ---------------------------------- links ----------------------------------
    token: Token!
}
