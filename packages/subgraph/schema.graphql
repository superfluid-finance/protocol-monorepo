##################
# Event Entities #
##################
"""
Event: An interface which is shared by all
event entities and contains basic transaction
data.
"""
interface Event {
    id: ID!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    name: String!

    """
    Holds the addresses for accounts that were impacted by the event.
    """
    addresses: [Bytes!]!
    timestamp: BigInt!
    transactionHash: Bytes!
    gasPrice: BigInt!
}

#     ConstantFlowAgreementV1    #
"""
FlowUpdated: An `Event` entity that is emitted
when a flow is created, updated, or deleted.
"""
type FlowUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, sender and receiver addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!

    """
    The address of the `token` being streamed.
    """
    token: Bytes!
    sender: Bytes!
    receiver: Bytes!

    """
    The address that is triggering the flow update.
    This will be the zero address until the flowOperator
    feature is live.
    """
    flowOperator: Bytes!

    """
    The flow rate per second.
    """
    flowRate: BigInt!
    totalSenderFlowRate: BigInt!
    totalReceiverFlowRate: BigInt!
    deposit: BigInt!
    userData: Bytes!

    # Custom Properties (not on event)

    """
    The previous flow rate.
    """
    oldFlowRate: BigInt!
    """
    The "type" of the `FlowUpdated` event.
    0 = create
    1 = update
    2 = terminate
    """
    type: Int!

    """
    The total amount streamed until the timestamp
    for the Stream entity linked to this event.
    """
    totalAmountStreamedUntilTimestamp: BigInt!

    # ---------------------------------- links ----------------------------------
    """
    The stream entity which is being modified.
    """
    stream: Stream!
}

type FlowOperatorUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, sender, and flowOperator addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!

    """
    The address of the `token` being streamed.
    """
    token: Bytes!
    sender: Bytes!

    """
    The permissions granted to the `flowOperator`.
    Octo bitmask representation.
    """
    permissions: Int!
    flowRateAllowance: BigInt!

    # ---------------------------------- links ----------------------------------
    flowOperator: FlowOperator!
}

#  InstantDistributionAgreementV1 #
type IndexCreatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token and publisher addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    index: Index!
}

type IndexDistributionClaimedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, publisher and subscriber addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    subscriber: Bytes!
    amount: BigInt!

    # ---------------------------------- links ----------------------------------
    index: Index!
}

type IndexUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token and publisher addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    oldIndexValue: BigInt!
    newIndexValue: BigInt!
    totalUnitsPending: BigInt!
    totalUnitsApproved: BigInt!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    index: Index!
}

type IndexSubscribedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, publisher and subscriber addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    subscriber: Bytes!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    index: Index!
}

type IndexUnitsUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, publisher and subscriber addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    subscriber: Bytes!
    units: BigInt!
    userData: Bytes!

    # Custom Properties (not on event)
    oldUnits: BigInt!

    # ---------------------------------- links ----------------------------------
    index: Index!
}

type IndexUnsubscribedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, publisher and subscriber addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    subscriber: Bytes!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    index: Index!
}

type SubscriptionApprovedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, publisher and subscriber addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    subscriber: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    subscription: IndexSubscription!
}

type SubscriptionDistributionClaimedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, publisher and subscriber addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    subscriber: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    amount: BigInt!

    # ---------------------------------- links ----------------------------------
    subscription: IndexSubscription!
}

type SubscriptionRevokedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, publisher and subscriber addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    subscriber: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    userData: Bytes!

    # ---------------------------------- links ----------------------------------
    subscription: IndexSubscription!
}

type SubscriptionUnitsUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, publisher and subscriber addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    subscriber: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    units: BigInt!
    userData: Bytes!

    # Custom Properties (not on event)
    oldUnits: BigInt!

    # ---------------------------------- links ----------------------------------
    subscription: IndexSubscription!
}

#     Host    #

type AgreementClassRegisteredEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    agreementType: Bytes!
    code: Bytes!
}

type AgreementClassUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    agreementType: Bytes!
    code: Bytes!
}

type AppRegisteredEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    app: Bytes!
}

type GovernanceReplacedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    oldGovernance: Bytes!
    newGovernance: Bytes!
}

type JailEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    app: Bytes!
    reason: BigInt!
}

type SuperTokenFactoryUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    newFactory: Bytes!
}

type SuperTokenLogicUpdatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    code: Bytes!
}

#     Resolver    #
type RoleAdminChangedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    role: Bytes!
    previousAdminRole: Bytes!
    newAdminRole: Bytes!
}

type RoleGrantedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    role: Bytes!
    account: Bytes!
    sender: Bytes!
}

type RoleRevokedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    role: Bytes!
    account: Bytes!
    sender: Bytes!
}

type SetEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!

    """
    Because the name property is indexed, the
    returned value will be a keccak256 hash
    of the string.
    """
    hashedName: Bytes!
    target: Bytes!

    resolverEntry: ResolverEntry!
}

#     SuperfluidGovernance    #
type CFAv1LiquidationPeriodChangedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    The address of the governance contract the event was emitted from.
    """
    governanceAddress: Bytes!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    order: BigInt!
    logIndex: BigInt!
    host: Bytes!
    superToken: Bytes!
    isKeySet: Boolean! # changed from Set due to strange bug w/ TheGraph
    liquidationPeriod: BigInt!
}

type ConfigChangedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    The address of the governance contract the event was emitted from.
    """
    governanceAddress: Bytes!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    host: Bytes!
    superToken: Bytes!
    key: Bytes!
    isKeySet: Boolean! # changed from Set due to strange bug w/ TheGraph
    value: BigInt!
}

type RewardAddressChangedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    The address of the governance contract the event was emitted from.
    """
    governanceAddress: Bytes!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    host: Bytes!
    superToken: Bytes!
    isKeySet: Boolean! # changed from Set due to strange bug w/ TheGraph
    rewardAddress: Bytes!
}

type PPPConfigurationChangedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    The address of the governance contract the event was emitted from.
    """
    governanceAddress: Bytes!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    host: Bytes!
    superToken: Bytes!
    isKeySet: Boolean! # changed from Set due to strange bug w/ TheGraph
    liquidationPeriod: BigInt!
    patricianPeriod: BigInt!
}

type TrustedForwarderChangedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    The address of the governance contract the event was emitted from.
    """
    governanceAddress: Bytes!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    host: Bytes!
    superToken: Bytes!
    isKeySet: Boolean! # changed from Set due to strange bug w/ TheGraph
    forwarder: Bytes!
    enabled: Boolean!
}

#     SuperToken    #
type AgreementLiquidatedByEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, liquidatorAccount, penaltyAccount and bondAccount addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    liquidatorAccount: Bytes!
    agreementClass: Bytes!
    agreementId: Bytes!
    penaltyAccount: Bytes!
    bondAccount: Bytes!
    rewardAmount: BigInt!
    bailoutAmount: BigInt!
}

type AgreementLiquidatedV2Event implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, liquidatorAccount, targetAccount and rewardAmountReceiver addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    liquidatorAccount: Bytes!
    agreementClass: Bytes!
    agreementId: Bytes!
    targetAccount: Bytes!
    rewardAmountReceiver: Bytes!
    rewardAmount: BigInt!
    targetAccountBalanceDelta: BigInt!
    version: BigInt!
    liquidationType: Int!

    """
    TO BE DEPRECATED in v2 endpoint - use rewardAmountReceiver instead
    """
    rewardAccount: Bytes! @deprecated(reason: "use rewardAmountReceiver")
}

type BurnedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token and from addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    operator: Bytes!
    from: Bytes!
    token: Bytes!
    amount: BigInt!
    data: Bytes!
    operatorData: Bytes!
}

type MintedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, operator and to addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    operator: Bytes!
    to: Bytes!
    amount: BigInt!
    data: Bytes!
    token: Bytes!
    operatorData: Bytes!
}

type SentEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, operator and from addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    operator: Bytes!
    from: Bytes!
    to: Bytes!
    token: Bytes!
    amount: BigInt!
    data: Bytes!
    operatorData: Bytes!
}

type TransferEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token, from and to addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    from: Account!
    to: Account!
    value: BigInt!
    token: Bytes!
}

type TokenDowngradedEvent implements Event @entity {
    id: ID!
    account: Account!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token and account addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    amount: BigInt!
}

type TokenUpgradedEvent implements Event @entity {
    id: ID!
    account: Account!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token and account addresses.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
    amount: BigInt!
}

#     SuperTokenFactory    #

type CustomSuperTokenCreatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token address.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
}

type SuperTokenCreatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Holds the token address.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    token: Bytes!
}

type SuperTokenLogicCreatedEvent implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    gasPrice: BigInt!
    timestamp: BigInt!
    name: String!

    """
    Empty addresses array.
    """
    addresses: [Bytes!]!
    blockNumber: BigInt!
    logIndex: BigInt!
    order: BigInt!
    tokenLogic: Bytes!
}

#########################
# Higher Order Entities #
#########################
# State is defined as properties that will change outside
# of the BaseEntity properties.
# Links is defined as a property which links the current
# entity to another higher order entity.

"""
Account: A higher order entity created for any addresses which interact with
Superfluid contracts.
"""
type Account @entity {
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!

    """
    Indicates whether the address/account is a super app.
    """
    isSuperApp: Boolean!

    # ---------------------------------- links ----------------------------------
    inflows: [Stream!]! @derivedFrom(field: "receiver")
    outflows: [Stream!]! @derivedFrom(field: "sender")

    subscriptions: [IndexSubscription!]! @derivedFrom(field: "subscriber")
    publishedIndexes: [Index!]! @derivedFrom(field: "publisher")

    sentTransferEvents: [TransferEvent!]! @derivedFrom(field: "from")
    receivedTransferEvents: [TransferEvent!]! @derivedFrom(field: "to")

    tokenUpgradedEvents: [TokenUpgradedEvent!]! @derivedFrom(field: "account")
    tokenDowngradedEvents: [TokenDowngradedEvent!]!
        @derivedFrom(field: "account")

    accountTokenSnapshots: [AccountTokenSnapshot!]!
        @derivedFrom(field: "account")
}

"""
Index: An Index higher order entity.
"""
type Index @entity {
    """
    ID composed of: publisherAddress-tokenAddress-indexId
    """
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!

    """
    indexId is not the id of the `Index` entity.
    """
    indexId: BigInt!
    # ---------------------------------- state ----------------------------------

    indexValue: BigInt!

    """
    The number of subscriptions which have units allocated to them on the `Index`.
    """
    totalSubscriptionsWithUnits: Int!

    """
    The number of units allocated by the `Index` that are pending.
    This refers to the current (as of updatedAt) `totalUnitsPending`
    - not all that has ever been pending.
    """
    totalUnitsPending: BigInt!

    """
    The number of units allocated by the `Index` that are approved.
    This refers to the current (as of updatedAt) `totalUnitsApproved`
    - not all that has ever been approved.
    """
    totalUnitsApproved: BigInt!

    """
    The sum of `totalUnitsPending` and `totalUnitsApproved`.
    """
    totalUnits: BigInt!

    """
    The total amount distributed from this `Index`.
    """
    totalAmountDistributedUntilUpdatedAt: BigInt!

    # ---------------------------------- links ----------------------------------
    token: Token!
    publisher: Account!

    """
    The subscriptions of the index, it will include approved, unapproved
    and deleted subscriptions.
    """
    subscriptions: [IndexSubscription!]! @derivedFrom(field: "index")

    """
    IndexCreated event, there will only be one.
    """
    indexCreatedEvent: IndexCreatedEvent!

    indexDistributionClaimedEvents: [IndexDistributionClaimedEvent!]!
        @derivedFrom(field: "index")

    indexUpdatedEvents: [IndexUpdatedEvent!]! @derivedFrom(field: "index")
    indexSubscribedEvents: [IndexSubscribedEvent!]! @derivedFrom(field: "index")
    indexUnitsUpdatedEvents: [IndexUnitsUpdatedEvent!]!
        @derivedFrom(field: "index")
    indexUnsubscribedEvents: [IndexUnsubscribedEvent!]!
        @derivedFrom(field: "index")
}

"""
IndexSubscription: A higher order entity that contains subscription data for a `subscriber` account of a particular
`Index`.
"""
type IndexSubscription @entity {
    """
    ID composed of: subscriberAddress-publisherAddress-tokenAddress-IndexId
    """
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!
    subscriber: Account!

    # ---------------------------------- state ----------------------------------
    """
    Approved subscriptions don't require subscribers to claim tokens that are distributed from
    the publisher.
    """
    approved: Boolean!

    """
    If units is 0, it indicates that the subscription is "deleted". They are no longer
    subscribed to the index.
    """
    units: BigInt!

    """
    The total amount of tokens you've received via IDA until
    `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountReceivedUntilUpdatedAt: BigInt!

    """
    The previous index value - used to calculate `totalAmountReceivedUntilUpdatedAt` field as of the
    `index.updatedAtTimestamp`. The formula to get this value is:
    `IndexSubscription.totalAmountReceivedUntilUpdatedAt + ((index.newIndexValue - indexSubscription.indexValueUntilUpdatedAt) * indexSubscription.units)`.
    """
    indexValueUntilUpdatedAt: BigInt!
    # ---------------------------------- links ----------------------------------
    index: Index!

    """
    IndexSubscription approved events on the subscription.
    """
    subscriptionApprovedEvents: [SubscriptionApprovedEvent!]!
        @derivedFrom(field: "subscription")

    subscriptionDistributionClaimedEvents: [SubscriptionDistributionClaimedEvent!]!
        @derivedFrom(field: "subscription")

    subscriptionRevokedEvents: [SubscriptionRevokedEvent!]!
        @derivedFrom(field: "subscription")

    subscriptionUnitsUpdatedEvents: [SubscriptionUnitsUpdatedEvent!]!
        @derivedFrom(field: "subscription")
}

"""
Stream: A higher order entity that represents the lifetime of a stream between a `sender` and a `receiver`.
A account can start a stream, update the flow rate, but when they close it, it is
considered "dead". The next stream you create with the same `sender` and `receiver`
will create a new stream entity. Therefore, multiple stream entities can be created
between the same `sender` and `receiver`.
"""
type Stream @entity {
    """
    ID composed of: senderAddress-receiverAddress-tokenAddress-revisionIndex
    """
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!
    # ---------------------------------- state ----------------------------------
    currentFlowRate: BigInt!
    deposit: BigInt!

    """
    The amount streamed until `updatedAtTimestamp`/`updatedAtBlock`. The formula to get the current streamed
    amount is:
    `streamedUntilUpdatedAt + ((currentTime in seconds) - updatedAtTimestamp) * currentFlowRate`.
    """
    streamedUntilUpdatedAt: BigInt!
    # ---------------------------------- links ----------------------------------
    token: Token!
    sender: Account!
    receiver: Account!

    flowUpdatedEvents: [FlowUpdatedEvent!]! @derivedFrom(field: "stream")
    streamPeriods: [StreamPeriod!]! @derivedFrom(field: "stream")
}

"""
FlowOperator: A higher order entity that of a flow operator for an `AccountTokenSnapshot`.
"""
type FlowOperator @entity {
    """
    ID composed of: flowOperator - token - sender
    """
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!

    """
    The permissions granted to the `flowOperator`.
    Octo bitmask representation.
    """
    permissions: Int!

    """
    The flow rate allowance granted to the `flowOperator`
    by the `sender`. This can be reset if the `sender`
    updates the `flowOperator` flow rate allowance.
    """
    flowRateAllowanceGranted: BigInt!

    """
    The remaining flow rate allowance the `flowOperator` has,
    this will go down every time when `flowOperator` uses it
    (if they increase flowRate or create a new flow)
    and can only be reset if the `sender` updates the flow
    rate allowance.
    """
    flowRateAllowanceRemaining: BigInt!

    # ---------------------------------- links ----------------------------------
    flowOperator: Bytes!
    sender: Account!
    token: Token!
    accountTokenSnapshot: AccountTokenSnapshot!

    flowOperatorUpdatedEvents: [FlowOperatorUpdatedEvent!]!
        @derivedFrom(field: "flowOperator")
}

"""
StreamPeriod: A higher order entity that represents a period of time in a Stream with a constant flowRate.
"""
type StreamPeriod @entity {
    """
    ID composed of: streamId - periodRevisionIndex
    """
    id: ID!

    stream: Stream!

    sender: Account!
    receiver: Account!

    token: Token!

    flowRate: BigInt!
    deposit: BigInt!

    startedAtTimestamp: BigInt!
    startedAtBlockNumber: BigInt!
    startedAtEvent: FlowUpdatedEvent!
    """
    Following values are null until the StreamPeriod is terminated
    """
    stoppedAtTimestamp: BigInt
    stoppedAtBlockNumber: BigInt
    stoppedAtEvent: FlowUpdatedEvent

    totalAmountStreamed: BigInt
}

####################
#  Helper Entities #
####################
type StreamRevision @entity {
    id: ID!
    revisionIndex: Int!
    periodRevisionIndex: Int!
}

"""
Token: A higher order entity created for super tokens that are "valid" (tokens that have
Superfluid's host contract address set as the host).
"""
type Token @entity {
    # Note: All Tokens are Super Tokens for this subgraph
    """
    ID: the token address
    """
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    decimals: Int!
    name: String!
    symbol: String!
    isSuperToken: Boolean!

    """
    This indicates whether the token is a NativeAssetSuperToken.
    """
    isNativeAssetSuperToken: Boolean!

    """
    This indicates whether the token is a part of our resolver list.
    """
    isListed: Boolean!

    """
    The address of the underlying ERC20 token.
    """
    underlyingAddress: Bytes! # Underlying ERC20
    """
    The underlying ERC20 token for a SuperToken or
    null for a regular ERC20 token.
    """
    underlyingToken: Token
}

type ResolverEntry @entity {
    """
    ID: the keccak256 hash of the set name
    """
    id: ID!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!
    targetAddress: Bytes!
    isToken: Boolean!
    isListed: Boolean!

    setEvents: [SetEvent!]! @derivedFrom(field: "resolverEntry")
}

####################
#  Aggr. Entities  #
####################
"""
AccountTokenSnapshot: An aggregate entity which aggregates data on an account's
interaction with a `token`.
"""
type AccountTokenSnapshot @entity {
    """
    ID composed of: accountID-tokenID
    """
    id: ID!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!
    # ---------------------------------- state ----------------------------------
    """
    isLiquidationEstimateOptimistic, If `totalSubscriptionsWithUnits > 0`, it is true.
    Optimistic means that it is the earliest time the user will be liquidated as they may receive ongoing distributions which aren't tracked by the subgraph
    """
    isLiquidationEstimateOptimistic: Boolean!

    """
    Optimistic liquidation estimation property.
    """
    maybeCriticalAtTimestamp: BigInt

    """
    The number of currently open streams.
    """
    totalNumberOfActiveStreams: Int!

    """
    The number of all-time closed streams.
    """
    totalNumberOfClosedStreams: Int!

    """
    The current (as of updatedAt) number of subscriptions with units allocated to them tied to this `account`.
    """
    totalSubscriptionsWithUnits: Int!

    """
    Counts all currently (as of updatedAt) approved subscriptions whether or not they have units.
    """
    totalApprovedSubscriptions: Int!

    """
    Balance of `account` as of `updatedAtTimestamp`/`updatedAtBlock`.
    """
    balanceUntilUpdatedAt: BigInt!

    """
    The total deposit this account has held by the CFA agreement for `account` active streams.
    """
    totalDeposit: BigInt!

    """
    The total net flow rate of the `account` as of `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalNetFlowRate: BigInt!

    """
    The total inflow rate (receive flowRate per second) of the `account`.
    """
    totalInflowRate: BigInt!

    """
    The total outflow rate (send flowrate per second) of the `account`.
    """
    totalOutflowRate: BigInt!

    """
    The total amount of `token` streamed into this `account` until
    the `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountStreamedInUntilUpdatedAt: BigInt!

    """
    The total amount of `token` streamed from this `account` until
    the `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountStreamedOutUntilUpdatedAt: BigInt!

    """
    The total amount of `token` streamed through this `account` until
    the `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountStreamedUntilUpdatedAt: BigInt!

    """
    The total amount of `token` this `account` has transferred.
    """
    totalAmountTransferredUntilUpdatedAt: BigInt!
    # ---------------------------------- links ----------------------------------
    account: Account!
    token: Token!
    flowOperators: [FlowOperator!]! @derivedFrom(field: "accountTokenSnapshot")
    accountTokenSnapshotLogs: [AccountTokenSnapshotLog!]!
        @derivedFrom(field: "accountTokenSnapshot")
}

"""
AccountTokenSnapshotLog: Historical entries of AccountTokenSnapshot updates.
"""
type AccountTokenSnapshotLog @entity {
    id: ID!
    timestamp: BigInt!
    blockNumber: BigInt!

    transactionHash: Bytes!
    logIndex: BigInt!
    order: BigInt!
    triggeredByEventName: String!

    # ---------------------------------- state ----------------------------------
    """
    Optimistic liquidation estimation property.
    """
    maybeCriticalAtTimestamp: BigInt
    """
    The current (as of timestamp) number of currently open streams.
    """
    totalNumberOfActiveStreams: Int!

    """
    The current (as of timestamp) number of all-time closed streams.
    """
    totalNumberOfClosedStreams: Int!

    """
    The current (as of timestamp) number of subscriptions with units allocated to them tied to this `account`.
    """
    totalSubscriptionsWithUnits: Int!

    """
    Counts all currently (as of timestamp) approved subscriptions whether or not they have units.
    """
    totalApprovedSubscriptions: Int!

    """
    Balance of `account` as of `timestamp`/`block`.
    """
    balance: BigInt!

    """
    The total (as of timestamp) deposit this account has held by the CFA agreement for `account` active streams.
    """
    totalDeposit: BigInt!

    """
    The total (as of timestamp) net flow rate of the `account` as of `timestamp`/`block`.
    """
    totalNetFlowRate: BigInt!

    """
    The total (as of timestamp) inflow rate (receive flowRate per second) of the `account`.
    """
    totalInflowRate: BigInt!

    """
    The total (as of timestamp) outflow rate (send flowrate per second) of the `account`.
    """
    totalOutflowRate: BigInt!

    """
    The total (as of timestamp) amount of `token` streamed into this `account` until
    the `timestamp`/`block`.
    """
    totalAmountStreamedIn: BigInt!

    """
    The total (as of timestamp) amount of `token` streamed from this `account` until
    the `timestamp`/`block`.
    """
    totalAmountStreamedOut: BigInt!

    """
    The total (as of timestamp) net amount of `token` streamed through this `account` until
    the `timestamp`/`block`.
    """
    totalAmountStreamed: BigInt!

    """
    The total (as of timestamp) amount of `token` this `account` has transferred.
    """
    totalAmountTransferred: BigInt!
    # ---------------------------------- links ----------------------------------
    account: Account!
    token: Token!
    accountTokenSnapshot: AccountTokenSnapshot!
}

"""
TokenStatistic: An aggregate entity which aggregates data of a single `token`.
"""
type TokenStatistic @entity {
    """
    id: token address
    """
    id: ID!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!
    # ---------------------------------- state ----------------------------------
    """
    The total number of currently active `token` streams.
    """
    totalNumberOfActiveStreams: Int!

    """
    The all-time number of closed streams.
    """
    totalNumberOfClosedStreams: Int!

    """
    The total number of Indexes created with `token`.
    """
    totalNumberOfIndexes: Int!

    """
    The total number of "active" (has greater than 0 units and has distributed it at
    least once) Indexes created with `token`.
    """
    totalNumberOfActiveIndexes: Int!

    """
    The number of subscriptions which have units allocated to them
    created with Indexes that distribute `token`.
    """
    totalSubscriptionsWithUnits: Int!

    """
    Counts all approved subscriptions whether or not they have units.
    """
    totalApprovedSubscriptions: Int!

    """
    The total deposit held by the CFA agreement for this particular `token`.
    """
    totalDeposit: BigInt!

    """
    The total outflow rate of the `token` (how much value is being moved).
    """
    totalOutflowRate: BigInt!

    """
    The all-time total amount streamed (outflows) until the `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountStreamedUntilUpdatedAt: BigInt!

    """
    The all-time total amount transferred until the `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountTransferredUntilUpdatedAt: BigInt!

    """
    The all-time total amount distributed until the `updatedAtTimestamp`/`updatedAtBlock`.
    """
    totalAmountDistributedUntilUpdatedAt: BigInt!

    """
    The total supply of the token - this is impacted by users upgrading/downgrading their
    tokens.
    """
    totalSupply: BigInt!

    # ---------------------------------- links ----------------------------------
    token: Token!
    tokenStatisticLogs: [TokenStatisticLog!]!
        @derivedFrom(field: "tokenStatistic")
}

"""
TokenStatisticLog: Historical entries of TokenStatistic updates.
"""
type TokenStatisticLog @entity {
    id: ID!
    timestamp: BigInt!
    blockNumber: BigInt!

    transactionHash: Bytes!
    logIndex: BigInt!
    order: BigInt!
    triggeredByEventName: String!
    # ---------------------------------- state ----------------------------------
    """
    The total number of currently active `token` streams.
    """
    totalNumberOfActiveStreams: Int!

    """
    The all-time number of closed streams.
    """
    totalNumberOfClosedStreams: Int!

    """
    The total number of Indexes created with `token`.
    """
    totalNumberOfIndexes: Int!

    """
    The total number of "active" (has greater than 0 units and has distributed it at
    least once) Indexes created with `token`.
    """
    totalNumberOfActiveIndexes: Int!

    """
    The number of subscriptions which have units allocated to them
    created with Indexes that distribute `token`.
    """
    totalSubscriptionsWithUnits: Int!

    """
    Counts all approved subscriptions whether or not they have units.
    """
    totalApprovedSubscriptions: Int!

    """
    The total deposit held by the CFA agreement for this particular `token`.
    """
    totalDeposit: BigInt!

    """
    The total outflow rate of the `token` (how much value is being moved).
    """
    totalOutflowRate: BigInt!

    """
    The all-time total amount streamed (outflows) until the `timestamp`/`block`.
    """
    totalAmountStreamed: BigInt!

    """
    The all-time total amount transferred until the `timestamp`/`block`.
    """
    totalAmountTransferred: BigInt!

    """
    The all-time total amount distributed until the `timestamp`/`block`.
    """
    totalAmountDistributed: BigInt!

    """
    The total supply of the token - this is impacted by users upgrading/downgrading their
    tokens.
    """
    totalSupply: BigInt!

    # ---------------------------------- links ----------------------------------
    token: Token!
    tokenStatistic: TokenStatistic!
}

####################
#  Internal Entity #
####################

type SFMeta @entity {
    """
    The id is the commit hash.
    """
    id: ID!
    timestamp: BigInt!
    blockNumber: BigInt!
    """
    Whether the branch is feature/dev/v1.
    """
    configuration: String!
    """
    The branch the current deployment is coming from.
    """
    branch: String!
}
